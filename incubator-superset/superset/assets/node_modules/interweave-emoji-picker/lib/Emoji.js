"use strict";

exports.__esModule = true;
exports.default = exports.Emoji = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _interweaveEmoji = require("interweave-emoji");

var _withContext = _interopRequireDefault(require("./withContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Emoji = function (_React$Component) {
  _inheritsLoose(Emoji, _React$Component);

  function Emoji() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      event.stopPropagation();

      _this.props.onSelect(_this.props.emoji, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnter", function (event) {
      event.stopPropagation();

      _this.props.onEnter(_this.props.emoji, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleLeave", function (event) {
      event.stopPropagation();

      _this.props.onLeave(_this.props.emoji, event);
    });

    return _this;
  }

  var _proto = Emoji.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        active = _this$props.active,
        classNames = _this$props.context.classNames,
        emoji = _this$props.emoji,
        emojiPadding = _this$props.emojiPadding,
        emojiPath = _this$props.emojiPath,
        emojiSize = _this$props.emojiSize,
        emojiSource = _this$props.emojiSource;
    var dimension = emojiPadding + emojiPadding + emojiSize;
    var className = [classNames.emoji];

    if (active) {
      className.push(classNames.emojiActive);
    }

    return _react.default.createElement("button", {
      key: emoji.hexcode,
      className: className.join(' '),
      style: {
        height: dimension,
        padding: emojiPadding,
        width: dimension
      },
      title: emoji.annotation,
      type: "button",
      onClick: this.handleClick,
      onMouseEnter: this.handleEnter,
      onMouseLeave: this.handleLeave
    }, _react.default.createElement(_interweaveEmoji.Emoji, {
      emojiPath: emojiPath,
      emojiSize: emojiSize,
      emojiSource: emojiSource,
      hexcode: emoji.hexcode
    }));
  };

  return Emoji;
}(_react.default.Component);

exports.Emoji = Emoji;

_defineProperty(Emoji, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  emoji: _propTypes.default.any.isRequired,
  emojiPadding: _propTypes.default.number.isRequired,
  emojiPath: _propTypes.default.any.isRequired,
  emojiSize: _propTypes.default.number.isRequired,
  emojiSource: _propTypes.default.any.isRequired,
  onEnter: _propTypes.default.func.isRequired,
  onLeave: _propTypes.default.func.isRequired,
  onSelect: _propTypes.default.func.isRequired
});

var _default = (0, _withContext.default)(Emoji);

exports.default = _default;