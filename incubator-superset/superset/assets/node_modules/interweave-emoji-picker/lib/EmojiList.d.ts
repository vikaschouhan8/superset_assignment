import React from 'react';
import { ListRowProps } from 'react-virtualized';
import { CanonicalEmoji, Path, Source } from 'interweave-emoji';
import { WithContextProps } from './withContext';
import { CommonMode, GroupKey, GroupEmojiMap, GroupIndexMap } from './types';
export declare type VirtualRow = string | CanonicalEmoji[];
export interface EmojiListProps {
    activeEmoji?: CanonicalEmoji | null;
    activeGroup: GroupKey;
    clearIcon?: React.ReactNode;
    columnCount: number;
    columnPadding?: number;
    commonMode: CommonMode;
    emojiPadding: number;
    emojiPath: Path;
    emojiSize: number;
    emojiSource: Source;
    groupedEmojis: GroupEmojiMap;
    hideGroupHeaders: boolean;
    noResults?: React.ReactNode;
    onClear: () => void;
    onEnterEmoji: (emoji: CanonicalEmoji, event: React.MouseEvent<HTMLButtonElement>) => void;
    onLeaveEmoji: (emoji: CanonicalEmoji, event: React.MouseEvent<HTMLButtonElement>) => void;
    onScroll: () => void;
    onScrollGroup: (group: GroupKey) => void;
    onSelectEmoji: (emoji: CanonicalEmoji, event: React.MouseEvent<HTMLButtonElement>) => void;
    rowCount: number;
    rowPadding?: number;
    scrollToGroup: GroupKey | '';
    skinTonePalette?: React.ReactNode;
    stickyGroupHeader?: boolean;
}
export interface EmojiListState {
    emojis: GroupEmojiMap;
    indices: GroupIndexMap;
    rows: VirtualRow[];
}
export declare class EmojiList extends React.PureComponent<EmojiListProps & WithContextProps, EmojiListState> {
    static defaultProps: {
        activeEmoji: null;
        clearIcon: null;
        columnPadding: number;
        noResults: null;
        rowPadding: number;
        skinTonePalette: null;
    };
    state: EmojiListState;
    static getDerivedStateFromProps({ columnCount, groupedEmojis, hideGroupHeaders }: EmojiListProps, state: EmojiListState): {
        emojis: GroupEmojiMap;
        indices: GroupIndexMap;
        rows: VirtualRow[];
    } | null;
    /**
     * Loop over each group section within the scrollable container
     * and determine the active group.
     */
    handleRendered: (event: {
        overscanStartIndex: number;
        overscanStopIndex: number;
        startIndex: number;
        stopIndex: number;
    }) => void;
    /**
     * Render a group header.
     */
    renderGroupHeader: (group: GroupKey, sticky?: boolean) => JSX.Element;
    /**
     * Render a no results view.
     */
    renderNoResults: () => JSX.Element;
    /**
     * Render the list row. Either a group header or a row of emoji columns.
     */
    renderRow: (props: ListRowProps) => JSX.Element;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<EmojiListProps>;
export default _default;
//# sourceMappingURL=EmojiList.d.ts.map