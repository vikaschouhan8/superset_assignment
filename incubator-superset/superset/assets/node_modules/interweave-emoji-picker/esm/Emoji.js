import _pt from "prop-types";

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { Emoji as EmojiCharacter } from 'interweave-emoji';
import withContext from './withContext';
export var Emoji = function (_React$Component) {
  _inheritsLoose(Emoji, _React$Component);

  function Emoji() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      event.stopPropagation();

      _this.props.onSelect(_this.props.emoji, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnter", function (event) {
      event.stopPropagation();

      _this.props.onEnter(_this.props.emoji, event);
    });

    _defineProperty(_assertThisInitialized(_this), "handleLeave", function (event) {
      event.stopPropagation();

      _this.props.onLeave(_this.props.emoji, event);
    });

    return _this;
  }

  var _proto = Emoji.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        active = _this$props.active,
        classNames = _this$props.context.classNames,
        emoji = _this$props.emoji,
        emojiPadding = _this$props.emojiPadding,
        emojiPath = _this$props.emojiPath,
        emojiSize = _this$props.emojiSize,
        emojiSource = _this$props.emojiSource;
    var dimension = emojiPadding + emojiPadding + emojiSize;
    var className = [classNames.emoji];

    if (active) {
      className.push(classNames.emojiActive);
    }

    return React.createElement("button", {
      key: emoji.hexcode,
      className: className.join(' '),
      style: {
        height: dimension,
        padding: emojiPadding,
        width: dimension
      },
      title: emoji.annotation,
      type: "button",
      onClick: this.handleClick,
      onMouseEnter: this.handleEnter,
      onMouseLeave: this.handleLeave
    }, React.createElement(EmojiCharacter, {
      emojiPath: emojiPath,
      emojiSize: emojiSize,
      emojiSource: emojiSource,
      hexcode: emoji.hexcode
    }));
  };

  return Emoji;
}(React.Component);

_defineProperty(Emoji, "propTypes", {
  active: _pt.bool.isRequired,
  emoji: _pt.any.isRequired,
  emojiPadding: _pt.number.isRequired,
  emojiPath: _pt.any.isRequired,
  emojiSize: _pt.number.isRequired,
  emojiSource: _pt.any.isRequired,
  onEnter: _pt.func.isRequired,
  onLeave: _pt.func.isRequired,
  onSelect: _pt.func.isRequired
});

export default withContext(Emoji);