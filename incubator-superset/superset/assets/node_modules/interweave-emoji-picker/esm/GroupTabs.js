import _pt from "prop-types";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import camelCase from 'lodash/camelCase';
import withContext from './withContext';
import Group from './Group';
import { GROUPS, GROUP_KEY_COMMONLY_USED, GROUP_ICONS } from './constants';
export var GroupTabs = function (_React$PureComponent) {
  _inheritsLoose(GroupTabs, _React$PureComponent);

  function GroupTabs() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = GroupTabs.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        activeGroup = _this$props.activeGroup,
        commonEmojis = _this$props.commonEmojis,
        commonMode = _this$props.commonMode,
        classNames = _this$props.context.classNames,
        icons = _this$props.icons,
        onSelect = _this$props.onSelect;
    var groups = [].concat(GROUPS);

    if (commonEmojis.length > 0) {
      groups.unshift(GROUP_KEY_COMMONLY_USED);
    }

    return React.createElement("nav", {
      className: classNames.groups
    }, React.createElement("ul", {
      className: classNames.groupsList
    }, groups.map(function (group) {
      return React.createElement("li", {
        key: group
      }, React.createElement(Group, {
        active: group === activeGroup,
        commonMode: commonMode,
        group: group,
        onSelect: onSelect
      }, icons[group] || icons[camelCase(group)] || GROUP_ICONS[group]));
    })));
  };

  return GroupTabs;
}(React.PureComponent);

_defineProperty(GroupTabs, "propTypes", {
  activeGroup: _pt.any.isRequired,
  commonEmojis: _pt.arrayOf(_pt.any).isRequired,
  commonMode: _pt.any.isRequired,
  icons: _pt.objectOf(_pt.node).isRequired,
  onSelect: _pt.func.isRequired
});

export default withContext(GroupTabs);