import _pt from "prop-types";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { Emoji as EmojiCharacter } from 'interweave-emoji';
import withContext from './withContext';
var TITLE_REGEX = /(^|:|\.)\s?[a-z]/g;
export var PreviewBar = function (_React$PureComponent) {
  _inheritsLoose(PreviewBar, _React$PureComponent);

  function PreviewBar() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = PreviewBar.prototype;

  _proto.formatTitle = function formatTitle(title) {
    return title.replace(TITLE_REGEX, function (token) {
      return token.toUpperCase();
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        _this$props$context = _this$props.context,
        classNames = _this$props$context.classNames,
        messages = _this$props$context.messages,
        emoji = _this$props.emoji,
        emojiLargeSize = _this$props.emojiLargeSize,
        emojiPath = _this$props.emojiPath,
        emojiSource = _this$props.emojiSource,
        hideEmoticon = _this$props.hideEmoticon,
        hideShortcodes = _this$props.hideShortcodes,
        noPreview = _this$props.noPreview;

    if (!emoji) {
      var preview = noPreview || messages.noPreview;
      return React.createElement("div", {
        className: classNames.preview
      }, preview && React.createElement("div", {
        className: classNames.noPreview
      }, preview));
    }

    var title = emoji.annotation || emoji.name;
    var subtitle = [];

    if (!hideEmoticon && emoji.emoticon) {
      subtitle.push(emoji.emoticon);
    }

    if (!hideShortcodes && emoji.canonical_shortcodes) {
      subtitle.push.apply(subtitle, emoji.canonical_shortcodes);
    }

    return React.createElement("div", {
      className: classNames.preview
    }, React.createElement("div", {
      className: classNames.previewEmoji
    }, React.createElement(EmojiCharacter, {
      emojiLargeSize: emojiLargeSize,
      emojiPath: emojiPath,
      emojiSource: emojiSource,
      enlargeEmoji: true,
      hexcode: emoji.hexcode
    })), React.createElement("div", {
      className: classNames.previewContent
    }, title && React.createElement("div", {
      className: classNames.previewTitle
    }, this.formatTitle(title)), subtitle.length > 0 && React.createElement("div", {
      className: classNames.previewSubtitle
    }, subtitle.join(' '))));
  };

  return PreviewBar;
}(React.PureComponent);

_defineProperty(PreviewBar, "propTypes", {
  emoji: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  emojiLargeSize: _pt.any.isRequired,
  emojiPath: _pt.any.isRequired,
  emojiSource: _pt.any.isRequired,
  hideEmoticon: _pt.bool.isRequired,
  hideShortcodes: _pt.bool.isRequired,
  noPreview: _pt.node
});

_defineProperty(PreviewBar, "defaultProps", {
  emoji: null,
  noPreview: null
});

export default withContext(PreviewBar);