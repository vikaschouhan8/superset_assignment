import _pt from "prop-types";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import camelCase from 'lodash/camelCase';
import SkinTone from './SkinTone';
import withContext from './withContext';
import { SKIN_TONES } from './constants';
export var SkinTonePalette = function (_React$PureComponent) {
  _inheritsLoose(SkinTonePalette, _React$PureComponent);

  function SkinTonePalette() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = SkinTonePalette.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        activeSkinTone = _this$props.activeSkinTone,
        classNames = _this$props.context.classNames,
        icons = _this$props.icons,
        onSelect = _this$props.onSelect;
    return React.createElement("nav", {
      className: classNames.skinTones
    }, React.createElement("ul", {
      className: classNames.skinTonesList
    }, SKIN_TONES.map(function (skinTone) {
      return React.createElement("li", {
        key: skinTone
      }, React.createElement(SkinTone, {
        active: activeSkinTone === skinTone,
        skinTone: skinTone,
        onSelect: onSelect
      }, icons[skinTone] || icons[camelCase(skinTone)] || null));
    })));
  };

  return SkinTonePalette;
}(React.PureComponent);

_defineProperty(SkinTonePalette, "propTypes", {
  activeSkinTone: _pt.any.isRequired,
  icons: _pt.objectOf(_pt.node).isRequired,
  onSelect: _pt.func.isRequired
});

export default withContext(SkinTonePalette);