import _pt from "prop-types";

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import camelCase from 'lodash/camelCase';
import upperFirst from 'lodash/upperFirst';
import withContext from './withContext';
import { SKIN_COLORS } from './constants';
export var SkinTone = function (_React$PureComponent) {
  _inheritsLoose(SkinTone, _React$PureComponent);

  function SkinTone() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      event.stopPropagation();

      _this.props.onSelect(_this.props.skinTone, event);
    });

    return _this;
  }

  var _proto = SkinTone.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        active = _this$props.active,
        children = _this$props.children,
        _this$props$context = _this$props.context,
        classNames = _this$props$context.classNames,
        messages = _this$props$context.messages,
        skinTone = _this$props.skinTone;
    var className = [classNames.skinTone];
    var color = SKIN_COLORS[skinTone];
    var key = camelCase(skinTone);

    if (active) {
      className.push(classNames.skinToneActive);
    }

    return React.createElement("button", {
      className: className.join(' '),
      style: {
        backgroundColor: color,
        borderColor: color,
        color: color
      },
      title: messages["skin" + upperFirst(key)],
      type: "button",
      onClick: this.handleClick
    }, children || ' ');
  };

  return SkinTone;
}(React.PureComponent);

_defineProperty(SkinTone, "propTypes", {
  active: _pt.bool.isRequired,
  children: _pt.node,
  onSelect: _pt.func.isRequired,
  skinTone: _pt.any.isRequired
});

_defineProperty(SkinTone, "defaultProps", {
  children: null
});

export default withContext(SkinTone);