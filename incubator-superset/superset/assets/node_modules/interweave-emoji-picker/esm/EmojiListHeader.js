import _pt from "prop-types";

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import camelCase from 'lodash/camelCase';
import withContext from './withContext';
import { GROUP_KEY_COMMONLY_USED, GROUP_KEY_SEARCH_RESULTS, GROUP_KEY_SMILEYS_PEOPLE, GROUP_KEY_NONE } from './constants';
export var EmojiListHeader = function (_React$PureComponent) {
  _inheritsLoose(EmojiListHeader, _React$PureComponent);

  function EmojiListHeader() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "handleClear", function (event) {
      event.preventDefault();

      _this.props.onClear();
    });

    return _this;
  }

  var _proto = EmojiListHeader.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        clearIcon = _this$props.clearIcon,
        commonMode = _this$props.commonMode,
        _this$props$context = _this$props.context,
        classNames = _this$props$context.classNames,
        messages = _this$props$context.messages,
        group = _this$props.group,
        skinTonePalette = _this$props.skinTonePalette,
        sticky = _this$props.sticky;
    var showClear = clearIcon && group === GROUP_KEY_COMMONLY_USED;
    var showPalette = skinTonePalette && (group === GROUP_KEY_SMILEYS_PEOPLE || group === GROUP_KEY_SEARCH_RESULTS || group === GROUP_KEY_NONE);
    var className = [classNames.emojisHeader];

    if (sticky) {
      className.push(classNames.emojisHeaderSticky);
    }

    return React.createElement("header", {
      className: className.join(' ')
    }, React.createElement("span", null, group === GROUP_KEY_COMMONLY_USED ? messages[camelCase(commonMode)] : messages[camelCase(group)]), showPalette && skinTonePalette, showClear && React.createElement("button", {
      type: "button",
      title: messages.clearUsed,
      className: classNames.clear,
      onClick: this.handleClear
    }, clearIcon));
  };

  return EmojiListHeader;
}(React.PureComponent);

_defineProperty(EmojiListHeader, "propTypes", {
  clearIcon: _pt.node,
  commonMode: _pt.any.isRequired,
  group: _pt.any.isRequired,
  onClear: _pt.func.isRequired,
  skinTonePalette: _pt.node,
  sticky: _pt.bool
});

_defineProperty(EmojiListHeader, "defaultProps", {
  clearIcon: null,
  skinTonePalette: null,
  sticky: false
});

export default withContext(EmojiListHeader);