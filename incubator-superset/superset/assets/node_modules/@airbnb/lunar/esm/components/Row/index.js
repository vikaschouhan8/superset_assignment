import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

/** A presentational block element for displaying horizontal content in up to 3 columns. */
export class Row extends React.Component {
  render() {
    const {
      cx,
      after,
      baseline,
      before,
      children,
      compact,
      inline,
      maxHeight,
      middleAlign,
      spacious,
      styles,
      topline,
      truncated
    } = this.props;
    return React.createElement("div", {
      className: cx(styles.row, {
        maxHeight
      }, compact && styles.row_compact, spacious && styles.row_spacious, middleAlign && styles.row_middleAlign, baseline && styles.row_baseline, topline && styles.row_topline)
    }, before && React.createElement("div", {
      className: cx(styles.before, inline && styles.inline, (inline || compact) && styles.before_compact)
    }, before), React.createElement("div", {
      className: cx(inline ? styles.inline : styles.primary, truncated && styles.primary_truncated)
    }, children), after && React.createElement("div", {
      className: cx(styles.after, inline && styles.inline, (inline || compact) && styles.after_compact)
    }, after));
  }

}

_defineProperty(Row, "propTypes", {
  after: _pt.node,
  baseline: _pt.bool,
  before: _pt.node,
  children: _pt.any.isRequired,
  compact: _pt.bool,
  inline: _pt.bool,
  maxHeight: _pt.oneOfType([_pt.number, _pt.string]),
  middleAlign: _pt.bool,
  spacious: _pt.bool,
  topline: _pt.bool,
  truncated: _pt.bool
});

_defineProperty(Row, "defaultProps", {
  after: null,
  baseline: false,
  before: null,
  compact: false,
  flat: false,
  inline: false,
  middleAlign: false,
  topline: false,
  truncated: false
});

export default withStyles((_ref) => {
  let {
    ui,
    unit
  } = _ref;
  return {
    row: {
      display: 'flex'
    },
    row_compact: {
      paddingBottom: unit * 1.5,
      paddingTop: unit * 1.5
    },
    row_spacious: {
      paddingBottom: unit * 3,
      paddingTop: unit * 3
    },
    row_middleAlign: {
      alignItems: 'center'
    },
    row_baseline: {
      borderBottom: ui.border
    },
    row_topline: {
      borderTop: ui.border
    },
    after: {
      paddingLeft: unit * 2,
      flexShrink: 0
    },
    after_compact: {
      paddingLeft: unit
    },
    before: {
      paddingRight: unit * 2,
      flexShrink: 0
    },
    before_compact: {
      paddingRight: unit
    },
    primary: {
      flex: 1,
      maxWidth: '100%'
    },
    primary_truncated: {
      overflow: 'hidden'
    },
    inline: {
      display: 'inline-flex',
      alignSelf: 'initial'
    }
  };
})(Row);