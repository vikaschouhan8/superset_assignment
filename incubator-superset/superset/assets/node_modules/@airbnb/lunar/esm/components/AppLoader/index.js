import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import ErrorMessage from '../ErrorMessage';
import Loader from '../Loader';
import Title from '../Title';
import Text from '../Text';

/** A loading indicator, representing the state of a request, for applications and landing pages. */
export class AppLoader extends React.Component {
  render() {
    const {
      cx,
      centered,
      children,
      error,
      errorTitle,
      failureText,
      fetched,
      loadingText,
      small,
      styles,
      subtitle
    } = this.props;

    if (fetched && !error) {
      return React.createElement("main", null, children);
    }

    return React.createElement("div", {
      className: cx(styles.appLoader, centered && styles.appLoader_centered)
    }, React.createElement(Title, {
      level: small ? 3 : 1
    }, error ? failureText : loadingText), subtitle && React.createElement("div", {
      className: cx(styles.subtitle)
    }, React.createElement(Text, {
      large: !small
    }, subtitle)), React.createElement("div", {
      className: cx(styles.errorOrLoader)
    }, error ? React.createElement(ErrorMessage, {
      error: error,
      title: errorTitle
    }) : React.createElement(Loader, {
      inline: true
    })));
  }

}

_defineProperty(AppLoader, "propTypes", {
  centered: _pt.bool,
  children: _pt.any.isRequired,
  error: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  errorTitle: _pt.node,
  failureText: _pt.any.isRequired,
  fetched: _pt.bool,
  loadingText: _pt.any.isRequired,
  small: _pt.bool,
  subtitle: _pt.node
});

_defineProperty(AppLoader, "defaultProps", {
  centered: false,
  small: false,
  subtitle: null
});

export default withStyles((_ref) => {
  let {
    unit
  } = _ref;
  return {
    appLoader: {
      padding: unit * 10
    },
    appLoader_centered: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center'
    },
    subtitle: {
      marginTop: unit
    },
    errorOrLoader: {
      marginTop: unit * 1.5,
      maxWidth: '65%'
    }
  };
})(AppLoader);