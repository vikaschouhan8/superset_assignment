import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */
import React from 'react';
import withBoundary from '../../composers/withBoundary';
import withStyles from '../../composers/withStyles';
import GradientScroller from '../GradientScroller';
import Tab from './Tab';
export { Tab };

/** A controller for multiple tabs. */
export class Tabs extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      selectedKey: this.getDefaultSelectedKey()
    });

    _defineProperty(this, "handleClick", key => {
      const {
        persistWithHash
      } = this.props;
      this.setState({
        selectedKey: key
      });
      this.props.onChange(key);

      if (persistWithHash) {
        const query = this.getHashQuery();
        query.set(persistWithHash, key);
        history.pushState(null, '', "#" + String(query));
      }
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.defaultKey !== prevProps.defaultKey) {
      this.setState({
        selectedKey: this.props.defaultKey
      });
    }
  }

  getDefaultSelectedKey() {
    const {
      defaultKey,
      persistWithHash
    } = this.props;
    return persistWithHash && this.getHashQuery().get(persistWithHash) || defaultKey || '';
  }

  getHashQuery() {
    const {
      hash
    } = location;
    return new URLSearchParams(hash.length > 1 ? hash.slice(1) : '');
  }

  render() {
    const {
      cx,
      borderless,
      children,
      scrollable,
      stretched,
      styles
    } = this.props;
    const {
      selectedKey
    } = this.state; // Generate content

    let content = null;
    const nav = React.createElement("nav", {
      role: "tablist",
      className: cx(styles.nav, borderless && styles.nav_borderless)
    }, React.Children.map(children, (child, i) => {
      if (!child) {
        return null;
      }

      const {
        key,
        props
      } = child;
      const selected = key === selectedKey || !selectedKey && i === 0;

      if ("production" !== process.env.NODE_ENV && !key) {
        throw new Error('Tab components require a unique `key`.');
      }

      if (selected && props && props.children) {
        content = props.children;
      }

      return React.cloneElement(child, {
        borderless,
        keyName: key,
        selected,
        stretched,
        onClick: this.handleClick
      });
    }));
    return React.createElement("div", null, scrollable ? React.createElement(GradientScroller, {
      hideScrollbar: true,
      showArrows: true
    }, nav) : nav, content && React.createElement("section", {
      role: "tabpanel",
      className: cx(styles.panel)
    }, content));
  }

}

_defineProperty(Tabs, "propTypes", {
  borderless: _pt.bool,
  children: _pt.any.isRequired,
  defaultKey: _pt.string,
  onChange: _pt.func,
  persistWithHash: _pt.string,
  scrollable: _pt.bool,
  stretched: _pt.bool,
  trackingName: _pt.string
});

_defineProperty(Tabs, "defaultProps", {
  borderless: false,
  defaultKey: '',

  onChange() {},

  persistWithHash: '',
  scrollable: false,
  stretched: false
});

export default withBoundary('Tabs')(withStyles((_ref) => {
  let {
    color,
    ui,
    unit
  } = _ref;
  return {
    nav: {
      borderBottom: ui.borderThick,
      display: 'flex'
    },
    nav_borderless: {
      borderColor: color.clear
    },
    panel: {
      marginTop: unit
    }
  };
})(Tabs));