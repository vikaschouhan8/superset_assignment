import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import buildInputStyles from '../../themes/buildInputStyles';
const sizingProp = mutuallyExclusiveTrueProps('small', 'compact', 'large');

class FormInput extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      compact,
      disabled,
      hasPrefix,
      hasSuffix,
      hidden,
      id,
      important,
      invalid,
      large,
      noTranslate,
      optional,
      propagateRef,
      small,
      styles,
      tagName: Tag
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "compact", "disabled", "hasPrefix", "hasSuffix", "hidden", "id", "important", "invalid", "large", "noTranslate", "optional", "propagateRef", "small", "styles", "tagName"]);

    const isSelect = Tag === 'select';

    const props = _extends({}, restProps, {
      className: cx(styles.input, (compact || small) && styles.input_compact, disabled && styles.input_disabled, hasPrefix && styles.input_hasPrefix, hasSuffix && styles.input_hasSuffix, hidden && styles.input_hidden, important && styles.input_important, invalid && styles.input_invalid, isSelect && styles.select, isSelect && compact && styles.select_compact, large && styles.input_large),
      disabled,
      id,
      required: !optional
    });

    if ("production" !== process.env.NODE_ENV) {
      if (compact) {
        // eslint-disable-next-line no-console
        console.log('Input: `compact` prop is deprecated, please use `small` instead.');
      }
    } // Only populate when invalid, otherwise it will break some CSS selectors


    if (invalid) {
      props['aria-invalid'] = true;
      props['aria-describedby'] = id + "-error";
    } // Cannot use chidren for input/textarea as they are void elements


    if (isSelect) {
      props.children = children;
    } // Add magical className to prevent Google Chrome translation


    if (noTranslate) {
      props.className += ' notranslate';
    } // @ts-ignore [ts] JSX element type 'Component' does not have any construct or call signatures. [2604]


    return React.createElement(Tag, _extends({}, props, {
      ref: propagateRef,
      "data-gramm": "false",
      "data-enable-grammarly": "false"
    }));
  }

}

_defineProperty(FormInput, "propTypes", {
  tagName: _pt.oneOf(['input', 'select', 'textarea']).isRequired,
  hasSuffix: _pt.bool,
  hasPrefix: _pt.bool,
  children: _pt.node,
  value: _pt.string,
  propagateRef: _pt.oneOfType([_pt.string, _pt.func, _pt.object]),
  optional: _pt.bool,
  noTranslate: _pt.bool,
  invalid: _pt.bool,
  important: _pt.bool,
  compact: sizingProp,
  large: sizingProp,
  small: sizingProp
});

_defineProperty(FormInput, "defaultProps", {
  children: null,
  compact: false,
  disabled: false,
  hasPrefix: false,
  hasSuffix: false,
  hidden: false,
  important: false,
  invalid: false,
  large: false,
  noTranslate: false,
  optional: false,
  small: false,
  value: ''
});

export default withStyles(buildInputStyles)(FormInput);