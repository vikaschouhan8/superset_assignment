function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { mutuallyExclusiveProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import Row from '../Row';
import Spacing from '../Spacing';
const imageUrlTypePropType = mutuallyExclusiveProps(PropTypes.string, 'beforeImageSrc', 'afterImageSrc', 'topImageSrc');
const afterPropType = mutuallyExclusiveProps(PropTypes.oneOfType([PropTypes.node, imageUrlTypePropType]), 'after', 'afterImageSrc');
const beforePropType = mutuallyExclusiveProps(PropTypes.oneOfType([PropTypes.node, imageUrlTypePropType]), 'before', 'beforeImageSrc');

/** Content block within a card. */
export class CardContent extends React.Component {
  render() {
    const {
      cx,
      after,
      afterImageSrc,
      before,
      beforeImageSrc,
      children,
      compact,
      large,
      maxHeight,
      middleAlign,
      onClick,
      styles,
      topImageSrc,
      truncated
    } = this.props;
    const ContainerTag = onClick ? 'button' : 'div';
    const props = onClick ? {
      type: 'button',
      onClick
    } : {};
    const spacing = compact ? 1.5 : 3;
    const horizontalSpacing = compact ? 0 : 1;
    let afterContent = after ? React.createElement("div", {
      className: cx(styles.side, compact && styles.side_compact, styles.after, compact && styles.after_compact)
    }, after) : null;

    if (!afterContent && afterImageSrc) {
      afterContent = React.createElement("div", {
        className: cx(styles.imageWrapper, large && styles.imageWrapper_large)
      }, React.createElement("img", {
        className: cx(styles.image),
        alt: "",
        height: "100%",
        src: afterImageSrc,
        width: "100%"
      }));
    }

    let beforeContent = before ? React.createElement("div", {
      className: cx(styles.side, compact && styles.side_compact, styles.before, compact && styles.before_compact)
    }, before) : null;

    if (!beforeContent && beforeImageSrc) {
      beforeContent = React.createElement("div", {
        className: cx(styles.imageWrapper, large && styles.imageWrapper_large)
      }, React.createElement("img", {
        className: cx(styles.image),
        alt: "",
        height: "100%",
        src: beforeImageSrc,
        width: "100%"
      }));
    }

    return (// @ts-ignore [ts] JSX element type 'ContainerTag' does not have any construct or call signatures. [2604]
      React.createElement(ContainerTag, _extends({}, props, {
        className: cx(styles.container, onClick && styles.container_button)
      }), topImageSrc && React.createElement("div", {
        className: cx(styles.topImage, large && styles.topImage_large)
      }, React.createElement("img", {
        className: cx(styles.image),
        alt: "",
        height: "100%",
        src: topImageSrc,
        width: "100%"
      })), React.createElement(Row, {
        after: afterContent,
        before: beforeContent,
        maxHeight: maxHeight,
        middleAlign: middleAlign,
        truncated: truncated
      }, React.createElement(Spacing, {
        inner: true,
        left: beforeContent ? horizontalSpacing : spacing,
        right: afterContent ? horizontalSpacing : spacing,
        vertical: spacing
      }, children)))
    );
  }

}

_defineProperty(CardContent, "propTypes", {
  onClick: PropTypes.func,
  truncated: PropTypes.bool,
  middleAlign: PropTypes.bool,
  maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  large: PropTypes.bool,
  compact: PropTypes.bool,
  children: PropTypes.any.isRequired,
  after: afterPropType,
  afterImageSrc: imageUrlTypePropType,
  before: beforePropType,
  beforeImageSrc: imageUrlTypePropType,
  topImageSrc: imageUrlTypePropType
});

export default withStyles((_ref) => {
  let {
    color,
    pattern,
    ui,
    unit
  } = _ref;
  return {
    container: {
      borderBottom: ui.border,
      ':last-child': {
        borderBottom: 0
      }
    },
    container_button: _extends({}, pattern.resetButton, {
      borderBottom: ui.border,
      display: 'block',
      textAlign: 'left',
      width: '100%',
      '@selectors': {
        ':hover, :focus': {
          backgroundColor: color.accent.bgHover,
          outline: 'none'
        }
      }
    }),
    side: {
      display: 'flex',
      alignItems: 'center',
      height: '100%',
      paddingTop: unit * 3,
      paddingBottom: unit * 3
    },
    side_compact: {
      paddingTop: unit * 1.5,
      paddingBottom: unit * 1.5
    },
    after: {
      paddingRight: unit * 3
    },
    after_compact: {
      paddingRight: unit * 1.5
    },
    before: {
      paddingLeft: unit * 3
    },
    before_compact: {
      paddingLeft: unit * 1.5
    },
    image: {
      display: 'block',
      objectFit: 'cover'
    },
    imageWrapper: {
      height: '100%',
      width: 80,
      overflow: 'hidden'
    },
    imageWrapper_large: {
      width: 195
    },
    topImage: {
      height: 105
    },
    topImage_large: {
      height: 195
    }
  };
})(CardContent);