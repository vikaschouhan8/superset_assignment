import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import Item from './Item';
export { Item };

class List extends React.Component {
  render() {
    const {
      children,
      cx,
      horizontal,
      ordered,
      styles,
      wrap
    } = this.props;
    const Tag = ordered ? 'ol' : 'ul';
    return React.createElement(Tag, {
      className: cx(styles.list, horizontal && styles.list_horizontal, horizontal && wrap && styles.list_horizontal_wrap)
    }, React.Children.map(children, child => {
      if (!child) {
        return null;
      }

      if (horizontal) {
        return React.cloneElement(child, {
          horizontal
        });
      }

      return child;
    }));
  }

}

_defineProperty(List, "propTypes", {
  children: _pt.any.isRequired,
  horizontal: _pt.bool,
  ordered: _pt.bool,
  wrap: _pt.bool
});

export default withStyles(() => ({
  list: {
    listStyle: 'none',
    margin: 0,
    padding: 0
  },
  list_horizontal: {
    display: 'flex'
  },
  list_horizontal_wrap: {
    flexWrap: 'wrap'
  }
}))(List);