import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

function cleanClassName(className) {
  return String(className).replace('.', 'dot');
}
/** Common component for arbitray layout structure and spacing. */


export class Spacing extends React.Component {
  render() {
    const {
      cx,
      all,
      bottom,
      children,
      horizontal,
      left,
      tag: TagProp = 'div',
      top,
      inline,
      inner,
      right,
      styles,
      vertical
    } = this.props;
    const type = inner ? 'inner' : 'outer';
    const classes = [];

    if (all) {
      const cleaned = cleanClassName(all);
      classes.push(styles[type + "Top_" + cleaned], styles[type + "Right_" + cleaned], styles[type + "Bottom_" + cleaned], styles[type + "Left_" + cleaned]);
    } else {
      if (vertical) {
        const cleaned = cleanClassName(vertical);
        classes.push(styles[type + "Top_" + cleaned], styles[type + "Bottom_" + cleaned]);
      } else {
        if (top) {
          const cleaned = cleanClassName(top);
          classes.push(styles[type + "Top_" + cleaned]);
        }

        if (bottom) {
          const cleaned = cleanClassName(bottom);
          classes.push(styles[type + "Bottom_" + cleaned]);
        }
      }

      if (horizontal) {
        const cleaned = cleanClassName(horizontal);
        classes.push(styles[type + "Left_" + cleaned], styles[type + "Right_" + cleaned]);
      } else {
        if (left) {
          const cleaned = cleanClassName(left);
          classes.push(styles[type + "Left_" + cleaned]);
        }

        if (right) {
          const cleaned = cleanClassName(right);
          classes.push(styles[type + "Right_" + cleaned]);
        }
      }
    }

    return React.createElement(TagProp, {
      className: cx(...classes, inline && styles.spacing_inline)
    }, children);
  }

}

_defineProperty(Spacing, "propTypes", {
  all: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  bottom: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  children: _pt.any.isRequired,
  horizontal: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  inline: _pt.bool,
  inner: _pt.bool,
  left: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  right: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  tag: _pt.oneOf(['article', 'div', 'footer', 'header', 'section']),
  top: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12]),
  vertical: _pt.oneOf([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12])
});

_defineProperty(Spacing, "defaultProps", {
  all: 0,
  bottom: 0,
  horizontal: 0,
  inline: false,
  inner: false,
  left: 0,
  right: 0,
  top: 0,
  vertical: 0
});

export default withStyles((_ref) => {
  let {
    unit
  } = _ref;
  const spacing = {};

  for (let i = 0; i <= 12; i += 0.5) {
    const size = unit * i;
    ['Top', 'Right', 'Bottom', 'Left'].forEach(side => {
      const cleaned = cleanClassName(i);
      spacing["outer" + side + "_" + cleaned] = {
        ["margin" + side]: size
      };
      spacing["inner" + side + "_" + cleaned] = {
        ["padding" + side]: size
      };
    });
  }

  return _extends({}, spacing, {
    spacing_inline: {
      display: 'inline-block'
    }
  });
})(Spacing);