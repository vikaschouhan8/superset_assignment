import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../../composers/withStyles';
export const MAX_HEIGHT_IMAGE = 720;
export const MAX_HEIGHT_IMAGE_SMALL = 420;

class ModalImageLayout extends React.Component {
  render() {
    const {
      cx,
      children,
      sizes,
      srcSet,
      type,
      url,
      styles
    } = this.props;
    return React.createElement("div", {
      className: cx(styles.splitContent)
    }, React.createElement("div", {
      className: cx(styles.splitContentPane)
    }, children), React.createElement("div", {
      className: cx(styles.splitContentPane, styles.splitContentImagePane)
    }, type === 'center' && React.createElement("img", {
      className: cx(styles.image),
      src: url,
      srcSet: srcSet && srcSet.join(','),
      sizes: sizes && sizes.join(','),
      alt: ""
    }), type === 'cover' && React.createElement("img", {
      className: cx(styles.image, styles.imageCover),
      src: url,
      srcSet: srcSet && srcSet.join(','),
      alt: ""
    })));
  }

}

_defineProperty(ModalImageLayout, "propTypes", {
  sizes: _pt.arrayOf(_pt.string),
  srcSet: _pt.arrayOf(_pt.string),
  type: _pt.oneOf(['center', 'cover']).isRequired,
  url: _pt.string.isRequired,
  children: _pt.any.isRequired
});

export default withStyles((_ref) => {
  let {
    responsive,
    ui,
    unit
  } = _ref;
  return {
    splitContent: {
      display: 'flex'
    },
    splitContentPane: {
      flex: '1'
    },
    splitContentImagePane: {
      borderLeft: ui.border,
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'center',
      overflow: 'hidden',
      position: 'relative',
      '@media': {
        [responsive.xsmall]: {
          display: 'none'
        }
      }
    },
    image: {
      display: 'block',
      objectFit: 'contain',
      maxWidth: '100%',
      maxHeight: '100%',
      margin: unit * 3
    },
    imageCover: {
      objectFit: 'cover',
      height: '100%',
      width: '100%',
      margin: 0
    }
  };
})(ModalImageLayout);