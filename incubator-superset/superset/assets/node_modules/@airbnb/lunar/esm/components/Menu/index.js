import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import Separator from './Separator';
import Item from './Item';
import Row from './Row';

/** An abstract menu for use within dropdowns, selects, autocompletes, and more. */
export class Menu extends React.Component {
  render() {
    const {
      cx,
      accessibilityLabel,
      children,
      maxHeight,
      minWidth,
      overflow,
      role,
      styles
    } = this.props;
    const scrollable = !!maxHeight && !overflow;
    return React.createElement("ul", {
      role: role,
      "aria-label": accessibilityLabel,
      className: cx(styles.menu, {
        maxHeight: scrollable ? maxHeight : 'auto',
        minWidth
      }, scrollable && styles.menu_scrollable)
    }, children);
  }

}

_defineProperty(Menu, "propTypes", {
  children: _pt.node,
  accessibilityLabel: _pt.string.isRequired,
  maxHeight: _pt.number,
  minWidth: _pt.number,
  role: _pt.string,
  overflow: _pt.bool
});

_defineProperty(Menu, "defaultProps", {
  children: null,
  minWidth: 200,
  overflow: false,
  role: 'menu'
});

export { Item, Separator, Row };
export default withStyles((_ref) => {
  let {
    color,
    ui,
    pattern,
    unit
  } = _ref;
  return {
    menu: _extends({}, pattern.box, {
      margin: 0,
      padding: unit + "px 0",
      backgroundColor: color.accent.bg,
      listStyle: 'none',
      '@selectors': {
        '> li': {
          position: 'relative'
        },
        // These are jank. Better way?
        '> li:first-child > *': {
          borderTopLeftRadius: ui.borderRadius,
          borderTopRightRadius: ui.borderRadius
        },
        '> li:last-child > *': {
          borderBottomLeftRadius: ui.borderRadius,
          borderBottomRightRadius: ui.borderRadius
        }
      }
    }),
    menu_scrollable: {
      overflowY: 'auto'
    }
  };
})(Menu);