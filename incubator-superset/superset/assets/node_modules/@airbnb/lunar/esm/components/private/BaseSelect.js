import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import IconCaretDown from '@airbnb/lunar-icons/lib/interface/IconCaretDown';
import withStyles from '../../composers/withStyles';
import FormInput from './FormInput';

class BaseSelect extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", event => {
      this.props.onChange(event.currentTarget.value, event);
    });
  }

  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      placeholder,
      styles
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "placeholder", "styles"]);

    return React.createElement("div", {
      className: cx(styles.select)
    }, React.createElement(FormInput, _extends({}, restProps, {
      onChange: this.handleChange,
      tagName: "select"
    }), placeholder && React.createElement("option", {
      value: "",
      disabled: true
    }, placeholder), children), React.createElement("span", {
      className: cx(styles.arrow, restProps.disabled && styles.arrow_disabled, restProps.invalid && styles.arrow_invalid, restProps.compact && styles.arrow_compact)
    }, React.createElement(IconCaretDown, {
      decorative: true,
      size: "2em"
    })));
  }

}

_defineProperty(BaseSelect, "propTypes", {
  children: _pt.any.isRequired,
  placeholder: _pt.string,
  onChange: _pt.func.isRequired
});

_defineProperty(BaseSelect, "defaultProps", {
  placeholder: ''
});

export default withStyles((_ref) => {
  let {
    pattern,
    unit
  } = _ref;
  return {
    select: {
      position: 'relative',
      display: 'block',
      width: '100%'
    },
    arrow: {
      position: 'absolute',
      right: unit,
      top: '50%',
      transform: 'translateY(-50%)',
      pointerEvents: 'none',
      zIndex: 1
    },
    arrow_disabled: _extends({}, pattern.disabled),
    arrow_invalid: _extends({}, pattern.invalid),
    arrow_compact: {
      right: unit * 0.75
    }
  };
})(BaseSelect);