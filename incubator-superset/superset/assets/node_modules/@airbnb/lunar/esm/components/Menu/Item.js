import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import IconCaretLeft from '@airbnb/lunar-icons/lib/interface/IconCaretLeft';
import IconCaretRight from '@airbnb/lunar-icons/lib/interface/IconCaretRight';
import iconComponent from '../../prop-types/iconComponent';
import withStyles from '../../composers/withStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import Text from '../Text';
import DirectionalIcon from '../DirectionalIcon';

/** An interactive item within a menu. */
export class MenuItem extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      showSubmenu: false
    });

    _defineProperty(this, "handleMouseEnter", () => {
      if (this.props.submenu) {
        this.setState({
          showSubmenu: true
        });
      }
    });

    _defineProperty(this, "handleMouseLeave", () => {
      if (this.props.submenu) {
        this.setState({
          showSubmenu: false
        });
      }
    });
  }

  render() {
    const {
      cx,
      children,
      disabled,
      highlighted,
      href,
      icon,
      id,
      onClick,
      openInNewWindow,
      role,
      spacious,
      styles,
      submenu,
      tabIndex,
      tip,
      trackingName
    } = this.props;
    const {
      showSubmenu
    } = this.state;
    const after = submenu ? React.createElement(DirectionalIcon, {
      direction: "right",
      left: IconCaretLeft,
      right: IconCaretRight,
      size: "1.5em",
      decorative: true
    }) : tip;
    return React.createElement("li", {
      role: "none",
      onMouseEnter: this.handleMouseEnter,
      onMouseLeave: this.handleMouseLeave
    }, React.createElement(ButtonOrLink, {
      afterIcon: after ? React.createElement(Text, {
        muted: true,
        small: true
      }, after) : null,
      beforeIcon: icon,
      disabled: disabled,
      href: href,
      trackingName: trackingName,
      id: id,
      onClick: onClick,
      openInNewWindow: openInNewWindow,
      role: role,
      tabIndex: tabIndex,
      "aria-haspopup": !!submenu,
      "aria-expanded": showSubmenu,
      className: cx(styles.item, (showSubmenu || highlighted) && styles.item_highlighted, disabled && styles.item_disabled, spacious && styles.item_spacious)
    }, children), showSubmenu && React.createElement("div", {
      className: cx(styles.submenu)
    }, submenu));
  }

}

_defineProperty(MenuItem, "propTypes", {
  trackingName: _pt.string,
  tip: _pt.node,
  tabIndex: _pt.number,
  submenu: _pt.node,
  spacious: _pt.bool,
  role: _pt.string,
  openInNewWindow: _pt.bool,
  onClick: _pt.func,
  id: _pt.string,
  href: _pt.string,
  highlighted: _pt.bool,
  disabled: _pt.bool,
  children: _pt.any.isRequired,
  icon: iconComponent
});

_defineProperty(MenuItem, "defaultProps", {
  disabled: false,
  highlighted: false,
  href: '',
  icon: null,
  openInNewWindow: false,
  role: 'menuitem',
  spacious: false,
  submenu: null,
  tabIndex: -1,
  tip: null
});

export default withStyles((_ref) => {
  let {
    color,
    font,
    pattern,
    unit,
    transition
  } = _ref;
  return {
    item: _extends({}, transition.box, {}, font.textRegular, {
      width: '100%',
      padding: unit + "px " + 1.5 * unit + "px",
      border: 0,
      textAlign: 'left',
      backgroundColor: 'transparent',
      cursor: 'pointer',
      textDecoration: 'none',
      outlineOffset: '-3px',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      color: color.accent.text,
      ':hover': {
        backgroundColor: color.accent.bgHover,
        color: color.core.neutral[6]
      },
      '@selectors': {
        // Fix content
        '> span': {
          flexGrow: 1
        },
        // Fix icons
        '> div': {
          flexGrow: 0,
          margin: 0,
          ':first-child': {
            marginRight: unit
          },
          ':last-child': {
            marginLeft: unit
          }
        }
      }
    }),
    item_spacious: {
      padding: unit * 2
    },
    item_disabled: _extends({}, pattern.disabled),
    item_highlighted: {
      backgroundColor: color.accent.bgHover
    },
    submenu: {
      position: 'absolute',
      top: -1,
      left: '99%'
    }
  };
})(MenuItem);