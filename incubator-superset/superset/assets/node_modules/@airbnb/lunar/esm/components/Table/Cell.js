import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

/** An individual table cell. */
export class TableCell extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      centerAlign,
      children,
      header,
      startAlign,
      endAlign,
      styles,
      truncate,
      wrap
    } = _this$props,
          props = _objectWithoutPropertiesLoose(_this$props, ["cx", "centerAlign", "children", "header", "startAlign", "endAlign", "styles", "truncate", "wrap"]);

    const Tag = header ? 'th' : 'td';
    return React.createElement(Tag, _extends({}, props, {
      className: cx(truncate && styles.cell_truncate, startAlign && styles.cell_left, centerAlign && styles.cell_center, endAlign && styles.cell_right, wrap && styles.cell_wrap)
    }), children);
  }

}

_defineProperty(TableCell, "propTypes", {
  centerAlign: _pt.bool,
  children: _pt.node,
  colSpan: _pt.number,
  endAlign: _pt.bool,
  header: _pt.bool,
  startAlign: _pt.bool,
  truncate: _pt.bool,
  wrap: _pt.bool
});

_defineProperty(TableCell, "defaultProps", {
  centerAlign: false,
  endAlign: false,
  header: false,
  startAlign: false,
  truncate: false,
  wrap: false
});

export default withStyles(() => ({
  cell_truncate: {
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    textOverflow: 'ellipsis',
    ':hover': {
      maxWidth: 'none',
      overflow: 'inherit',
      whiteSpace: 'inherit',
      wordWrap: 'break-word'
    }
  },
  cell_left: {
    textAlign: 'left'
  },
  cell_center: {
    textAlign: 'center'
  },
  cell_right: {
    textAlign: 'right'
  },
  cell_wrap: {
    whiteSpace: 'normal',
    wordWrap: 'break-word'
  }
}))(TableCell);