import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import BaseEmojiPicker from 'interweave-emoji-picker';
import IconBolt from '@airbnb/lunar-icons/lib/general/IconBolt';
import IconBulb from '@airbnb/lunar-icons/lib/general/IconBulb';
import IconClock from '@airbnb/lunar-icons/lib/general/IconClock';
import IconFlag from '@airbnb/lunar-icons/lib/interface/IconFlag';
import IconFlower from '@airbnb/lunar-icons/lib/general/IconFlower';
import IconPlane from '@airbnb/lunar-icons/lib/general/IconPlane';
import IconSmile from '@airbnb/lunar-icons/lib/general/IconSmile';
import IconUtensils from '@airbnb/lunar-icons/lib/general/IconUtensils';
import IconVideoGame from '@airbnb/lunar-icons/lib/general/IconVideoGame';
import IconCloseAlt from '@airbnb/lunar-icons/lib/interface/IconCloseAlt';
import withStyles from '../../composers/withStyles';
import Core from '../..';
import { ESCAPE } from '../../keys';
import T from '../Translate'; // Exclude inappropriate or offensive emojis

const blacklist = ['1F621', // 😡 pouting face
'1F620', // 😠 angry face
'1F47F', // 👿 angry face with horns
'1F4A9', // 💩 pile of poo
'1F595', // 🖕 middle finger
'1F445', // 👅 tongue
'1F444', // 👄 mouth
'1F48B', // 💋 kiss mark
'1F4A3', // 💣️ bomb
'1F346', // 🍆 eggplant
'1F52A', // 🔪 kitchen knife
'1F3E9', // 🏩 love hotel
'1F52B', // 🔫 pistol
'1F489', // 💉 syringe
'1F48A'];
const groupIcons = {
  commonlyUsed: React.createElement(IconClock, {
    decorative: true
  }),
  smileysPeople: React.createElement(IconSmile, {
    decorative: true
  }),
  animalsNature: React.createElement(IconFlower, {
    decorative: true
  }),
  foodDrink: React.createElement(IconUtensils, {
    decorative: true
  }),
  travelPlaces: React.createElement(IconPlane, {
    decorative: true
  }),
  activities: React.createElement(IconVideoGame, {
    decorative: true
  }),
  objects: React.createElement(IconBulb, {
    decorative: true
  }),
  symbols: React.createElement(IconBolt, {
    decorative: true
  }),
  flags: React.createElement(IconFlag, {
    decorative: true
  })
};
const clearIcon = React.createElement(IconCloseAlt, {
  size: "1.325em",
  decorative: true
});

/**
 * Display an emoji picker using [interweave-emoji-picker](https://github.com/milesj/interweave/tree/master/packages/interweave-emoji-picker).
 * Should primarily be used for private to public communication.
 */
export class EmojiPicker extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleKeyUp", event => {
      // When the picker wrapper is focused, we need to close on esc
      if (event.key === ESCAPE) {
        this.props.onClosePicker();
      }
    });
  }

  render() {
    const _this$props = this.props,
          {
      cx,
      styles,
      disableAutoFocus
    } = _this$props,
          props = _objectWithoutPropertiesLoose(_this$props, ["cx", "styles", "disableAutoFocus"]);

    const classNames = {
      picker: cx(styles.picker),
      emoji: cx(styles.emoji),
      emojiActive: cx(styles.emoji_active),
      emojis: cx(styles.emojis),
      emojisSection: cx(styles.emojisSection),
      emojisHeader: cx(styles.emojisHeader),
      emojisHeaderSticky: cx(styles.emojisHeader_sticky),
      emojisBody: cx(styles.emojisBody),
      group: cx(styles.group),
      groupActive: cx(styles.group_active),
      groups: cx(styles.groups),
      groupsList: cx(styles.list),
      skinTone: cx(styles.skinTone),
      skinToneActive: cx(styles.skinTone_active),
      skinTones: cx(styles.skinTones),
      skinTonesList: cx(styles.list),
      noPreview: cx(styles.noPreview),
      noResults: cx(styles.noResults),
      preview: cx(styles.preview),
      previewEmoji: cx(styles.previewEmoji),
      previewTitle: cx(styles.previewTitle),
      previewSubtitle: cx(styles.previewSubtitle),
      search: cx(styles.search),
      searchInput: cx(styles.searchInput),
      clear: cx(styles.clear)
    };
    const messages = {
      recentlyUsed: T.phrase('Recently Used', {}, {
        key: 'lunar.emoji.recentlyUsed'
      }),
      frequentlyUsed: T.phrase('Frequently Used', {}, {
        key: 'lunar.emoji.frequentlyUsed'
      }),
      smileysPeople: T.phrase('Smileys & People', {}, {
        key: 'lunar.emoji.smileysPeople'
      }),
      animalsNature: T.phrase('Animals & Nature', {}, {
        key: 'lunar.emoji.animalsNature'
      }),
      foodDrink: T.phrase('Food & Drink', {}, {
        key: 'lunar.emoji.foodDrink'
      }),
      travelPlaces: T.phrase('Travel & Weather', {}, {
        key: 'lunar.emoji.travelWeather'
      }),
      activities: T.phrase('Activities', {}, {
        key: 'lunar.emoji.activities'
      }),
      objects: T.phrase('Objects', {}, {
        key: 'lunar.emoji.objects'
      }),
      symbols: T.phrase('Symbols', {}, {
        key: 'lunar.emoji.symbols'
      }),
      flags: T.phrase('Flags', {}, {
        key: 'lunar.emoji.flags'
      }),
      searchResults: T.phrase('Search results', {}, {
        key: 'lunar.emoji.searchResults'
      }),
      none: T.phrase('All emojis', {}, {
        key: 'lunar.emoji.allResults'
      }),
      skinNone: T.phrase('No skin tone', {}, {
        key: 'lunar.emoji.noSkinTone'
      }),
      skinLight: T.phrase('Light skin tone', {}, {
        key: 'lunar.emoji.lightSkinTone'
      }),
      skinMediumLight: T.phrase('Medium-light skin tone', {}, {
        key: 'lunar.emoji.mediumLightSkinTone'
      }),
      skinMedium: T.phrase('Medium skin tone', {}, {
        key: 'lunar.emoji.mediumSkinTone'
      }),
      skinMediumDark: T.phrase('Medium-dark skin tone', {}, {
        key: 'lunar.emoji.mediumDarkSkinTone'
      }),
      skinDark: T.phrase('Dark skin tone', {}, {
        key: 'lunar.emoji.darkSkinTone'
      }),
      search: T.phrase('Search emojis', {}, {
        key: 'lunar.emoji.search'
      }),
      searchA11y: T.phrase('Search for emojis by keyword', {}, {
        key: 'lunar.emoji.searchKeyword'
      }),
      noResults: T.phrase('No results, please try again.', {}, {
        key: 'lunar.emoji.noResults'
      }),
      clearUsed: T.phrase('Clear frequently used', {}, {
        key: 'lunar.emoji.clearFrequentlyUsed'
      })
    };
    return React.createElement("div", {
      onKeyUp: this.handleKeyUp,
      role: "presentation"
    }, React.createElement(BaseEmojiPicker, _extends({
      autoFocus: !disableAutoFocus,
      commonMode: "frequently-used",
      columnCount: 10,
      emojiPadding: 5,
      emojiPath: Core.settings.emojiCDN,
      emojiSize: 20,
      emojiLargeSize: 48,
      stickyGroupHeader: true
    }, props, {
      classNames: classNames,
      clearIcon: clearIcon,
      blacklist: blacklist,
      displayOrder: ['preview', 'emojis', 'search', 'groups'],
      groupIcons: groupIcons,
      messages: messages
    })));
  }

}

_defineProperty(EmojiPicker, "propTypes", {
  disableAutoFocus: _pt.bool,
  onClosePicker: _pt.func.isRequired
});

_defineProperty(EmojiPicker, "defaultProps", {
  disableAutoFocus: false
});

export default withStyles((_ref) => {
  let {
    ui,
    unit,
    color,
    font,
    pattern
  } = _ref;
  return {
    picker: {
      background: color.accent.bg,
      border: ui.border,
      borderRadius: ui.borderRadius
    },
    preview: _extends({}, font.textRegular, {
      padding: unit * 1.5,
      borderBottom: ui.border,
      display: 'flex',
      alignItems: 'center',
      ':empty': {
        display: 'none'
      }
    }),
    previewEmoji: {
      flexGrow: 0,
      marginRight: unit * 2
    },
    previewTitle: _extends({}, font.textRegular, {
      marginBottom: unit / 2
    }),
    previewSubtitle: _extends({}, font.textSmall, {
      fontWeight: font.weights.light,
      color: color.muted
    }),
    emoji: {
      background: 'transparent',
      border: 0,
      fontSize: 'inherit',
      float: 'left',
      cursor: 'pointer',
      ':focus': {
        outline: 'none'
      },
      '@selectors': {
        ':not(:empty) > img': {
          display: 'block'
        }
      }
    },
    emoji_active: {
      background: color.accent.bgHover,
      borderRadius: ui.borderRadius
    },
    emojis: {
      position: 'relative',
      padding: unit
    },
    emojisHeader: _extends({}, font.textMicro, {
      fontWeight: font.weights.bold,
      textTransform: 'uppercase',
      color: color.accent.text,
      background: color.accent.bg,
      borderTopLeftRadius: ui.borderRadius,
      borderTopRightRadius: ui.borderRadius,
      padding: unit * 0.75 + "px 0"
    }),
    emojisHeader_sticky: {
      position: 'absolute',
      top: unit,
      left: unit,
      right: unit,
      zIndex: 2
    },
    list: {
      display: 'flex',
      flexWrap: 'nowrap',
      margin: 0,
      padding: 0,
      listStyle: 'none',
      justifyContent: 'space-between'
    },
    group: {
      background: 'transparent',
      border: '1px solid transparent',
      borderTop: 0,
      padding: unit + "px " + unit * 0.75 + "px",
      fontSize: 16,
      position: 'relative',
      cursor: 'pointer',
      color: color.accent.text,
      borderBottomLeftRadius: ui.borderRadius,
      borderBottomRightRadius: ui.borderRadius,
      ':hover': {
        background: color.core.neutral[2]
      },
      ':focus': {
        outline: 'none'
      }
    },
    group_active: {
      background: color.accent.bg,
      color: color.core.primary[3],
      ':hover': {
        background: color.accent.bgHover
      }
    },
    groups: {
      background: color.core.neutral[3],
      padding: "0 " + unit + "px " + unit / 2 + "px " + unit + "px"
    },
    skinTone: {
      borderWidth: 2,
      borderStyle: 'solid',
      borderRadius: '50%',
      width: 12,
      height: 12,
      lineHeight: 0,
      padding: 0,
      marginLeft: unit / 2,
      overflow: 'hidden',
      cursor: 'pointer',
      opacity: 0.75,
      ':hover': {
        opacity: 1
      },
      ':focus': {
        outline: 'none'
      }
    },
    skinTone_active: {
      background: 'white !important',
      opacity: 1
    },
    skinTones: {
      float: 'right',
      textAlign: 'center'
    },
    search: {
      padding: unit,
      paddingTop: 0
    },
    searchInput: _extends({}, font.textSmall, {
      fontWeight: font.weights.light,
      border: ui.borderThick,
      borderRadius: ui.borderRadius,
      backgroundColor: color.accent.bg,
      padding: unit,
      zIndex: 0,
      width: '100%',
      ':focus': _extends({}, pattern.focused)
    }),
    noPreview: _extends({}, font.textRegular, {
      color: color.muted
    }),
    noResults: _extends({}, font.textRegular, {
      padding: unit * 1.5
    }),
    clear: _extends({}, pattern.resetButton, {
      float: 'right',
      color: color.accent.text,
      margin: '0 -1px 0 0',
      ':hover': {
        color: color.core.neutral[4]
      }
    })
  };
})(EmojiPicker);