function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import { mutuallyExclusiveProps, requiredBy, forbidExtraProps } from 'airbnb-prop-types';
import iconComponent from '../../prop-types/iconComponent';
import withStyles from '../../composers/withStyles';
import ProfilePhoto from '../ProfilePhoto';
import ButtonOrLink from '../private/ButtonOrLink';

/** Compact component that represents a snippet of information, such as a filter. */
export class Chip extends React.Component {
  render() {
    const {
      cx,
      active,
      afterIcon,
      beforeIcon,
      children,
      compact,
      disabled,
      id,
      onClick,
      onIconClick,
      profileImageSrc,
      styles,
      trackingName
    } = this.props;
    const Component = onClick ? 'button' : 'div';
    const props = Component === 'button' ? _extends({
      disabled,
      onClick,
      type: 'button'
    }, trackingName && {
      'data-tracking-name': trackingName
    }) : {};
    const shouldRenderBefore = beforeIcon || profileImageSrc;
    return (// @ts-ignore [ts] JSX element type 'Component' does not have any construct or call signatures. [2604]
      React.createElement(Component, _extends({
        className: cx(styles.chip, onClick && styles.chip_button, !shouldRenderBefore && styles.chip_noBefore, !afterIcon && styles.chip_noAfter, active && styles.chip_active, onClick && active && styles.chip_active_button, compact && styles.chip_compact, disabled && styles.chip_disabled)
      }, props, {
        id: id
      }), shouldRenderBefore && React.createElement("div", {
        className: cx(styles.chipItem, styles.sideContent)
      }, React.createElement("div", {
        className: cx(styles.sideContentInner, !!beforeIcon && styles.iconWrapper, !!beforeIcon && styles.iconWrapperBefore)
      }, profileImageSrc && React.createElement(ProfilePhoto, {
        imageSrc: profileImageSrc,
        title: "",
        size: 4
      }), beforeIcon)), React.createElement("div", {
        className: cx(styles.chipItem, styles.content)
      }, children), afterIcon && React.createElement("div", {
        className: cx(styles.chipItem, styles.sideContent)
      }, React.createElement("div", {
        className: cx(styles.sideContentInner, styles.iconWrapper, styles.iconWrapperAfter)
      }, onIconClick ? React.createElement(ButtonOrLink, {
        className: cx(styles.iconButton, disabled && styles.iconButton_disabled),
        disabled: disabled,
        onClick: onIconClick
      }, afterIcon) : afterIcon)))
    );
  }

}

_defineProperty(Chip, "propTypes", {
  trackingName: PropTypes.string,
  onIconClick: PropTypes.func,
  id: PropTypes.string,
  disabled: PropTypes.bool,
  children: PropTypes.any.isRequired,
  active: PropTypes.bool,
  afterIcon: requiredBy('onIconClick', iconComponent),
  beforeIcon: mutuallyExclusiveProps(PropTypes.node, 'beforeIcon', 'profileImageSrc'),
  onClick: mutuallyExclusiveProps(PropTypes.func, 'onIconClick'),
  profileImageSrc: mutuallyExclusiveProps(PropTypes.any, 'beforeIcon', 'profileImageSrc', 'compact'),
  compact: mutuallyExclusiveProps(PropTypes.any, 'profileImageSrc', 'compact')
});

export default withStyles((_ref) => {
  let {
    color,
    font,
    pattern,
    transition,
    ui,
    unit
  } = _ref;
  return {
    chip: _extends({}, transition.box, {}, font.textSmall, {
      backgroundColor: color.accent.bg,
      border: ui.border,
      borderRadius: unit * 4,
      display: 'inline-block',
      height: unit * 4,
      overflow: 'hidden',
      whiteSpace: 'nowrap',
      verticalAlign: 'middle'
    }),
    chip_noBefore: {
      paddingLeft: unit
    },
    chip_noAfter: {
      paddingRight: unit
    },
    chip_active: {
      background: color.core.primary[3],
      borderColor: color.core.primary[3],
      color: color.accent.bg
    },
    chip_active_button: {
      '@selectors': {
        ':not([disabled]):hover': {
          backgroundColor: color.core.primary[4]
        }
      }
    },
    chip_compact: {
      borderRadius: 2,
      padding: "0 " + unit,
      height: 3 * unit
    },
    chip_disabled: {
      backgroundColor: color.core.neutral[1],
      cursor: 'normal',
      borderColor: color.core.neutral[1]
    },
    chip_button: {
      cursor: 'pointer',
      padding: 0,
      '@selectors': {
        ':not([disabled]):active': {
          boxShadow: ui.boxShadow
        },
        ':not([disabled]):hover': {
          backgroundColor: color.accent.bgHover
        }
      },
      ':focus': {
        backgroundColor: color.accent.bgHover,
        outline: 'none'
      }
    },
    chipItem: {
      height: '100%',
      verticalAlign: 'middle'
    },
    content: {
      alignItems: 'center',
      display: 'inline-flex',
      justifyContent: 'center',
      marginLeft: unit,
      marginRight: unit
    },
    iconWrapper: {
      color: color.core.neutral[3]
    },
    iconWrapperAfter: {
      padding: unit * 0.5 + "px " + unit * 0.5 + "px " + unit * 0.5 + "px 0"
    },
    iconWrapperBefore: {
      padding: unit * 0.5 + "px " + unit * 0.5 + "px " + unit * 0.5 + "px " + unit + "px"
    },
    iconButton: _extends({}, pattern.resetButton, {}, transition.box, {
      color: color.core.neutral[6],
      ':hover': {
        color: color.core.primary[3]
      },
      ':focus': {
        color: color.core.primary[3],
        outline: 'none'
      }
    }),
    iconButton_disabled: _extends({}, pattern.disabled, {
      ':hover': {
        color: color.core.neutral[6]
      }
    }),
    sideContent: {
      display: 'inline-block'
    },
    sideContentInner: {
      position: 'relative',
      top: '50%',
      transform: 'translateY(-50%)'
    }
  };
})(Chip);