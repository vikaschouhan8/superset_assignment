import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
const stateProp = mutuallyExclusiveTrueProps('muted', 'inverted', 'primary');
const alignProp = mutuallyExclusiveTrueProps('centerAlign', 'endAlign');

/** Display a string of text as a heading and or section title. */
export class Title extends React.Component {
  render() {
    const {
      cx,
      centerAlign,
      children,
      endAlign,
      inline,
      inverted,
      level,
      muted,
      primary,
      styles
    } = this.props;
    const Tag = "h" + level;
    return React.createElement(Tag, {
      className: cx(styles.title, level === 1 && styles.title_level1, level === 2 && styles.title_level2, level === 3 && styles.title_level3, inline && styles.title_inline, inverted && styles.title_inverted, muted && styles.title_muted, primary && styles.title_primary, centerAlign && styles.title_center, endAlign && styles.title_right)
    }, children);
  }

}

_defineProperty(Title, "propTypes", {
  level: _pt.oneOf([1, 2, 3]).isRequired,
  inline: _pt.bool,
  children: _pt.node,
  centerAlign: alignProp,
  endAlign: alignProp,
  inverted: stateProp,
  muted: stateProp,
  primary: stateProp
});

_defineProperty(Title, "defaultProps", {
  centerAlign: false,
  children: null,
  endAlign: false,
  inline: false,
  inverted: false,
  muted: false,
  primary: false
});

export default withStyles((_ref) => {
  let {
    color,
    font
  } = _ref;
  return {
    title: _extends({}, font.textReset, {
      color: color.accent.text
    }),
    title_inline: {
      display: 'inline'
    },
    title_level1: _extends({}, font.title1),
    title_level2: _extends({}, font.title2),
    title_level3: _extends({}, font.title3),
    title_inverted: {
      color: color.base
    },
    title_muted: {
      color: color.muted
    },
    title_primary: {
      color: color.core.primary[3]
    },
    title_center: {
      textAlign: 'center'
    },
    title_right: {
      textAlign: 'right'
    }
  };
})(Title);