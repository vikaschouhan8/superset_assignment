import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../../composers/withStyles';
export class Highlight extends React.Component {
  render() {
    const {
      cx,
      fallback,
      match,
      styles,
      word: searchWord
    } = this.props;

    if (!match) {
      return React.createElement(React.Fragment, null, fallback);
    }

    const {
      value,
      indices = []
    } = match;
    const matchIndices = [...indices]; // clean ref

    const output = [];
    let pair = matchIndices.shift();
    let substr = '';

    for (let i = 0; i < value.length; i += 1) {
      // if substr exists and we reach the start index of a match, push current substr and reset
      if (pair && substr && i === pair[0]) {
        output.push(React.createElement("span", {
          key: i + "-start"
        }, substr));
        substr = '';
      }

      substr += value.charAt(i); // push highlight when we reach the end index of a match

      if (pair && i === pair[1]) {
        if (substr) {
          output.push(React.createElement("span", {
            key: "end-" + i,
            className: cx(styles.highlight, substr.trim().toLowerCase() === searchWord && styles.highlight_dark)
          }, React.createElement("mark", null, substr)));
        }

        substr = '';
        pair = matchIndices.shift();
      }
    }

    if (substr) {
      output.push(React.createElement("span", {
        key: "last"
      }, substr));
    }

    return React.createElement(React.Fragment, null, output);
  }

}

_defineProperty(Highlight, "propTypes", {
  fallback: _pt.string,
  match: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),
  word: _pt.string
});

export default withStyles((_ref) => {
  let {
    color,
    ui
  } = _ref;
  return {
    highlight: {
      borderRadius: ui.borderRadius,
      backgroundColor: color.core.warning[0],
      '@selectors': {
        '> mark': {
          backgroundColor: 'transparent',
          color: 'inherit',
          position: 'relative',
          whiteSpace: 'nowrap'
        }
      }
    },
    highlight_dark: {
      backgroundColor: color.core.warning[3]
    }
  };
})(Highlight);