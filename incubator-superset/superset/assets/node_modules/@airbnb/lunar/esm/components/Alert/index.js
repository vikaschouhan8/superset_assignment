import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable prefer-destructuring */
import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import IconFlag from '@airbnb/lunar-icons/lib/interface/IconFlag';
import IconCheckAlt from '@airbnb/lunar-icons/lib/interface/IconCheckAlt';
import IconClose from '@airbnb/lunar-icons/lib/interface/IconClose';
import IconError from '@airbnb/lunar-icons/lib/interface/IconError';
import IconInfo from '@airbnb/lunar-icons/lib/interface/IconInfo';
import IconWarning from '@airbnb/lunar-icons/lib/interface/IconWarning';
import withStyles from '../../composers/withStyles';
import Row from '../Row';
import Spacing from '../Spacing';
import Text from '../Text';
import T from '../Translate';
import IconButton from '../IconButton';
import { STATUSES } from '../../constants';
const alertColorTypePropType = mutuallyExclusiveTrueProps(...STATUSES);

/** Classify content through the use of colorful alerts. */
export class Alert extends React.Component {
  render() {
    const {
      cx,
      children,
      danger,
      hideStatusIcon,
      info,
      inline,
      notice,
      styles,
      success,
      theme,
      title,
      warning,
      onClose
    } = this.props;
    const {
      color,
      unit
    } = theme;
    let StatusIcon = null;
    let iconColor = color.accent.text;

    if (danger) {
      StatusIcon = IconError;
      iconColor = color.core.danger[3];
    } else if (info) {
      StatusIcon = IconInfo;
      iconColor = color.core.primary[3];
    } else if (notice) {
      StatusIcon = IconFlag;
      iconColor = color.core.secondary[3];
    } else if (success) {
      StatusIcon = IconCheckAlt;
      iconColor = color.core.success[3];
    } else if (warning) {
      StatusIcon = IconWarning;
      iconColor = color.core.warning[3];
    }

    return React.createElement("div", {
      className: cx(styles.alert, inline && styles.alert_inline, !hideStatusIcon && !!StatusIcon && styles.alert_statusIcon, danger && styles.alert_danger, info && styles.alert_info, notice && styles.alert_notice, success && styles.alert_success, warning && styles.alert_warning)
    }, React.createElement(Row, {
      middleAlign: !children,
      after: onClose && React.createElement(IconButton, {
        onClick: onClose
      }, React.createElement(IconClose, {
        accessibilityLabel: T.phrase('Close', {}, {
          context: 'Close the alert',
          key: 'lunar.common.close'
        }),
        size: unit * 3
      })),
      before: !hideStatusIcon && StatusIcon && React.createElement(StatusIcon, {
        decorative: true,
        color: iconColor,
        size: unit * 3
      })
    }, React.createElement(Text, {
      bold: true
    }, title), children && React.createElement(Spacing, {
      top: 1
    }, React.createElement(Text, null, children))));
  }

}

_defineProperty(Alert, "propTypes", {
  onClose: _pt.func,
  title: _pt.any.isRequired,
  inline: _pt.bool,
  hideStatusIcon: _pt.bool,
  children: _pt.node,
  danger: alertColorTypePropType,
  info: alertColorTypePropType,
  notice: alertColorTypePropType,
  success: alertColorTypePropType,
  warning: alertColorTypePropType
});

_defineProperty(Alert, "defaultProps", {
  children: null,
  danger: false,
  hideStatusIcon: false,
  info: false,
  inline: false,
  notice: false,
  success: false,
  warning: false
});

export default withStyles((_ref) => {
  let {
    color,
    unit,
    pattern
  } = _ref;
  return {
    alert: _extends({}, pattern.box, {
      display: 'block',
      alignItems: 'start',
      position: 'relative',
      borderColor: color.core.neutral[1],
      backgroundColor: color.accent.bg,
      overflow: 'hidden',
      padding: unit * 3,
      ':before': {
        content: '" "',
        backgroundColor: color.accent.text,
        position: 'absolute',
        top: 0,
        left: 0,
        width: unit / 2,
        height: '100%'
      }
    }),
    alert_inline: {
      display: 'inline-block'
    },
    alert_danger: {
      ':before': {
        backgroundColor: color.core.danger[3]
      }
    },
    alert_info: {
      ':before': {
        backgroundColor: color.core.primary[3]
      }
    },
    alert_notice: {
      ':before': {
        backgroundColor: color.core.secondary[3]
      }
    },
    alert_success: {
      ':before': {
        backgroundColor: color.core.success[3]
      }
    },
    alert_warning: {
      ':before': {
        backgroundColor: color.core.warning[3]
      }
    },
    alert_statusIcon: {
      paddingLeft: unit * 2.5
    }
  };
}, {
  passThemeProp: true
})(Alert);