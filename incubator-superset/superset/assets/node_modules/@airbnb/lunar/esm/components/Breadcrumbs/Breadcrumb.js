import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import IconChevronLeft from '@airbnb/lunar-icons/lib/interface/IconChevronLeft';
import IconChevronRight from '@airbnb/lunar-icons/lib/interface/IconChevronRight';
import withStyles from '../../composers/withStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import DirectionalIcon from '../DirectionalIcon';

/** A single breadcrumb button. Usually rendered amongst a collection of breadcrumbs. */
class Breadcrumb extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", () => {
      const {
        onClick
      } = this.props;

      if (onClick) {
        onClick();
      }
    });
  }

  render() {
    const {
      cx,
      disabled,
      hideIcon,
      highlighted,
      id,
      label,
      href,
      onClick,
      selected,
      styles,
      trackingName
    } = this.props;
    const clickable = !disabled && (!!href || !!onClick);
    const aria = selected ? {
      'aria-current': 'page'
    } : {};
    return React.createElement("li", {
      className: cx(styles.li)
    }, React.createElement(ButtonOrLink, _extends({}, aria, {
      className: cx(styles.breadcrumb, clickable && styles.breadcrumb_clickable, highlighted && styles.breadcrumb_highlighted, clickable && highlighted && styles.breadcrumb_highlighted_clickable, selected && styles.breadcrumb_selected, disabled && styles.breadcrumb_disabled),
      afterIcon: hideIcon ? null : React.createElement(DirectionalIcon, {
        direction: "right",
        left: IconChevronLeft,
        right: IconChevronRight,
        size: 24,
        decorative: true
      }),
      disabled: disabled,
      href: href,
      trackingName: trackingName,
      id: id,
      onClick: this.handleClick
    }), label));
  }

}

_defineProperty(Breadcrumb, "propTypes", {
  disabled: _pt.bool,
  hideIcon: _pt.bool,
  highlighted: _pt.bool,
  horizontal: _pt.bool,
  id: _pt.string,
  label: _pt.string.isRequired,
  href: _pt.string,
  onClick: _pt.func,
  selected: _pt.bool,
  trackingName: _pt.string
});

_defineProperty(Breadcrumb, "defaultProps", {
  disabled: false,
  hideIcon: false,
  highlighted: false,
  href: '',
  selected: false
});

export default withStyles((_ref) => {
  let {
    color,
    font,
    pattern,
    transition,
    unit
  } = _ref;
  return {
    breadcrumb: _extends({}, pattern.resetButton, {}, font.textRegular, {}, transition.box, {
      color: color.core.neutral[5],
      cursor: 'default',
      outline: 'none'
    }),
    breadcrumb_clickable: {
      cursor: 'pointer',
      '@selectors': {
        ':not([disabled]):hover, :not([disabled]):focus': {
          color: color.core.neutral[4]
        }
      }
    },
    breadcrumb_disabled: _extends({}, pattern.disabled),
    breadcrumb_highlighted: {
      color: color.core.primary[3]
    },
    breadcrumb_highlighted_clickable: {
      '@selectors': {
        ':not([disabled]):hover, :not([disabled]):focus': {
          color: color.core.primary[4]
        }
      }
    },
    breadcrumb_selected: {
      fontWeight: font.weights.semibold
    },
    li: {
      marginRight: unit,
      ':last-child': {
        marginRight: 0
      }
    }
  };
})(Breadcrumb);