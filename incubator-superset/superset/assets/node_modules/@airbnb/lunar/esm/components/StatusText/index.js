import _pt from "prop-types";

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import Text from '../Text';
import { STATUSES } from '../../constants';
const statusPropType = mutuallyExclusiveTrueProps(...STATUSES);

/** Display a string of classified text with colorful statuses. */
export class StatusText extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      danger,
      info,
      muted,
      notice,
      styles,
      success,
      warning
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "danger", "info", "muted", "notice", "styles", "success", "warning"]);

    return React.createElement(Text, restProps, React.createElement("span", {
      className: cx(danger && styles.text_danger, info && styles.text_info, muted && styles.text_muted, notice && styles.text_notice, success && styles.text_success, warning && styles.text_warning)
    }, children));
  }

}

_defineProperty(StatusText, "propTypes", {
  children: _pt.any.isRequired,
  danger: statusPropType,
  info: statusPropType,
  muted: statusPropType,
  notice: statusPropType,
  success: statusPropType,
  warning: statusPropType
});

_defineProperty(StatusText, "defaultProps", {
  danger: false,
  info: false,
  muted: false,
  notice: false,
  success: false,
  warning: false
});

export default withStyles((_ref) => {
  let {
    color
  } = _ref;
  return {
    text_danger: {
      color: color.core.danger[4]
    },
    text_info: {
      color: color.core.primary[4]
    },
    text_muted: {
      color: color.muted
    },
    text_notice: {
      color: color.core.secondary[4]
    },
    text_success: {
      color: color.core.success[4]
    },
    text_warning: {
      color: color.core.warning[5]
    }
  };
})(StatusText);