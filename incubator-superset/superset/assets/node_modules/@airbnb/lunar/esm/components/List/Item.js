import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
const paddingPropType = mutuallyExclusiveTrueProps('compact', 'spacious');
export class ListItem extends React.Component {
  render() {
    const {
      bordered,
      children,
      compact,
      cx,
      horizontal,
      spacious,
      styles
    } = this.props;
    return React.createElement("li", {
      className: cx(!horizontal && bordered && styles.item_bordered, horizontal && bordered && styles.item_bordered_horizontal, !horizontal && compact && styles.item_compact, horizontal && compact && styles.item_compact_horizontal, !horizontal && spacious && styles.item_spacious, horizontal && spacious && styles.item_spacious_horizontal)
    }, children);
  }

}

_defineProperty(ListItem, "propTypes", {
  horizontal: _pt.bool,
  children: _pt.any.isRequired,
  bordered: _pt.bool,
  compact: paddingPropType,
  spacious: paddingPropType
});

_defineProperty(ListItem, "defaultProps", {
  bordered: false,
  compact: false,
  horizontal: false,
  spacious: false
});

export default withStyles((_ref) => {
  let {
    ui,
    unit
  } = _ref;
  return {
    item_bordered: {
      borderTop: ui.border,
      ':last-child': {
        borderBottom: ui.border
      }
    },
    item_bordered_horizontal: {
      borderLeft: ui.border,
      ':last-child': {
        borderRight: ui.border
      }
    },
    item_compact: {
      paddingBottom: unit * 1.5,
      paddingTop: unit * 1.5
    },
    item_compact_horizontal: {
      paddingLeft: unit * 1.5,
      paddingRight: unit * 1.5
    },
    item_spacious: {
      paddingBottom: unit * 3,
      paddingTop: unit * 3
    },
    item_spacious_horizontal: {
      paddingLeft: unit * 3,
      paddingRight: unit * 3
    }
  };
})(ListItem);