import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import IconChevronLeft from '@airbnb/lunar-icons/lib/interface/IconChevronLeft';
import IconChevronRight from '@airbnb/lunar-icons/lib/interface/IconChevronRight';
import IconCheckmark from '@airbnb/lunar-icons/lib/interface/IconCheck';
import withStyles from '../../../composers/withStyles';
import { ENTER, SPACE, ARROW_RIGHT, ARROW_LEFT } from '../../../keys';
import DirectionalIcon from '../../DirectionalIcon';
import Text from '../../Text';
const ICON_SIZE = 18;

class HierarchyItem extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "maybePick", () => {
      const {
        onItemPicked,
        item,
        definition
      } = this.props;

      if (item.readonly) {
        onItemPicked(null);
        this.goDeeper();
      } else {
        onItemPicked(definition);
      }
    });

    _defineProperty(this, "goDeeper", () => {
      const {
        onSubtree,
        onDomFocusDeeper,
        definition,
        item
      } = this.props;

      if (item.items || item.description) {
        onSubtree(definition, onDomFocusDeeper, true);
      }
    });

    _defineProperty(this, "goShallower", () => {
      const {
        onSubtree,
        onDomFocusShallower,
        definition
      } = this.props;
      onDomFocusShallower();
      onSubtree(definition.slice(0, -2), undefined, true);
    });

    _defineProperty(this, "handleClick", () => {
      this.maybePick();
    });

    _defineProperty(this, "handleMouseMove", () => {
      const {
        onSubtree,
        definition
      } = this.props;
      onSubtree(definition);
    });

    _defineProperty(this, "handleKeyDown", event => {
      switch (event.key) {
        case ENTER:
        case SPACE:
          this.maybePick();
          break;

        case ARROW_RIGHT:
          this.goDeeper();
          break;

        case ARROW_LEFT:
          this.goShallower();
          break;

        default:
          break;
      }
    });

    _defineProperty(this, "renderItem", () => {
      const {
        cx,
        focused,
        item,
        styles,
        selected,
        renderItem,
        theme
      } = this.props;
      return renderItem ? renderItem(item, selected, focused) : React.createElement(React.Fragment, null, selected && React.createElement("span", {
        className: cx(styles.checkmark)
      }, React.createElement(IconCheckmark, {
        decorative: true,
        color: theme.color.core.primary[3],
        size: ICON_SIZE
      })), React.createElement("span", {
        className: cx(styles.label)
      }, React.createElement(Text, null, item.label || item.name)));
    });
  }

  render() {
    const {
      cx,
      focused,
      item,
      styles,
      selected
    } = this.props;
    return React.createElement("div", {
      className: cx(styles.item, focused && styles.item_focused, item.readonly && styles.item_readonly),
      role: "option",
      "aria-selected": selected,
      onMouseMove: this.handleMouseMove,
      onClick: this.handleClick,
      onKeyDown: this.handleKeyDown // this is needed to find a focused parent item in a vertically aligned list
      ,
      tabIndex: focused ? 1 : 0
    }, this.renderItem(), item.items && React.createElement(DirectionalIcon, {
      direction: "right",
      left: IconChevronLeft,
      right: IconChevronRight,
      size: "1.4em",
      decorative: true,
      inline: true
    }));
  }

}

_defineProperty(HierarchyItem, "propTypes", {
  item: _pt.any.isRequired,
  definition: _pt.any.isRequired,
  renderItem: _pt.any,
  selected: _pt.bool.isRequired,
  focused: _pt.bool.isRequired,
  onSubtree: _pt.func.isRequired,
  onItemPicked: _pt.func.isRequired,
  onDomFocusDeeper: _pt.func.isRequired,
  onDomFocusShallower: _pt.func.isRequired
});

export default withStyles((_ref) => {
  let {
    color,
    unit,
    ui
  } = _ref;
  return {
    item: {
      display: 'flex',
      alignItems: 'center',
      padding: unit + "px " + 1.5 * unit + "px " + unit + "px " + 2.75 * unit + "px",
      cursor: 'pointer',
      position: 'relative',
      borderRadius: ui.borderRadius,
      '@selectors': {
        ':hover, :focus': {
          backgroundColor: color.accent.bgHover,
          outline: 'none'
        }
      }
    },
    item_focused: {
      backgroundColor: color.accent.bgHover
    },
    item_readonly: {
      cursor: 'initial'
    },
    label: {
      flexGrow: 1
    },
    checkmark: {
      position: 'absolute',
      left: 0.25 * unit + 1,
      top: ICON_SIZE / 2 + 1
    }
  };
}, {
  passThemeProp: true
})(HierarchyItem);