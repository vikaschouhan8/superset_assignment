import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

/** Horizontally align `Button`s with a consistent gutter between each. */
export class ButtonGroup extends React.Component {
  render() {
    const {
      cx,
      children,
      stacked,
      styles
    } = this.props;
    return React.createElement("div", {
      className: cx(styles.buttonGroup, stacked && styles.buttonGroup_stacked)
    }, React.Children.map(children, child => child ? React.createElement("div", {
      className: cx(stacked ? styles.cell_stacked : styles.cell)
    }, child) : null));
  }

}

_defineProperty(ButtonGroup, "propTypes", {
  children: _pt.any.isRequired,
  stacked: _pt.bool
});

_defineProperty(ButtonGroup, "defaultProps", {
  stacked: false
});

export default withStyles((_ref) => {
  let {
    unit
  } = _ref;
  return {
    buttonGroup: {
      display: 'flex',
      alignItems: 'center'
    },
    buttonGroup_stacked: {
      flexDirection: 'column',
      alignItems: 'stretch'
    },
    cell: {
      marginRight: unit,
      ':last-of-type': {
        marginRight: 0
      },
      ':empty': {
        display: 'none'
      }
    },
    cell_stacked: {
      marginBottom: unit,
      ':last-of-type': {
        marginBottom: 0
      }
    }
  };
})(ButtonGroup);