function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import Portal from '../Portal';
import ModalInner from './private/Inner';
import { ESCAPE } from '../../keys';
import { Z_INDEX_MODAL } from '../../constants';
import toRGBA from '../../utils/toRGBA';

/** A modal component with a backdrop and a standardized layout. */
export class Modal extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClose", event => {
      this.props.onClose(event);
    });

    _defineProperty(this, "handleKeyUp", event => {
      if (event.key === ESCAPE) {
        this.handleClose(event);
      }
    });
  }

  componentDidMount() {
    document.body.style.overflow = 'hidden';
  }

  componentWillUnmount() {
    document.body.style.overflow = '';
  }

  render() {
    const _this$props = this.props,
          {
      cx,
      styles
    } = _this$props,
          otherProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "styles"]);

    return React.createElement(Portal, null, React.createElement("div", {
      className: cx(styles.container)
    }, React.createElement("div", {
      onKeyUp: this.handleKeyUp,
      role: "presentation",
      className: cx(styles.wrapper)
    }, React.createElement(ModalInner, otherProps))));
  }

}
export default withStyles((_ref) => {
  let {
    color,
    unit
  } = _ref;
  return {
    container: {
      bottom: 0,
      left: 0,
      overflowY: 'auto',
      position: 'fixed',
      right: 0,
      top: 0,
      zIndex: Z_INDEX_MODAL
    },
    wrapper: {
      alignItems: 'center',
      backgroundColor: toRGBA(color.core.neutral[6], 75),
      display: 'flex',
      justifyContent: 'center',
      minHeight: '100%',
      padding: unit * 2,
      width: '100%'
    }
  };
})(Modal);