import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import iconComponent from '../../prop-types/iconComponent';
import withStyles from '../../composers/withStyles';
import ButtonOrLink from '../private/ButtonOrLink';
import Tooltip from '../Tooltip';

/** A button with an icon as content, and an optional tooltip. */
export class IconButton extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      active,
      disabled,
      inverted,
      tooltip,
      styles
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "active", "disabled", "inverted", "tooltip", "styles"]);

    const button = React.createElement(ButtonOrLink, _extends({}, restProps, {
      disabled: disabled,
      className: cx(styles.button, active && styles.button_active, inverted && styles.button_inverted, disabled && styles.button_disabled)
    }), children);
    return tooltip ? React.createElement(Tooltip, {
      content: tooltip,
      disabled: disabled
    }, button) : button;
  }

}

_defineProperty(IconButton, "propTypes", {
  tooltip: _pt.node,
  inverted: _pt.bool,
  active: _pt.bool,
  beforeIcon: _pt.node,
  afterIcon: _pt.node,
  children: iconComponent.isRequired
});

_defineProperty(IconButton, "defaultProps", {
  active: false,
  disabled: false,
  inverted: false,
  tooltip: null
});

export default withStyles((_ref) => {
  let {
    color,
    pattern,
    ui,
    unit,
    transition
  } = _ref;
  return {
    button: _extends({}, pattern.resetButton, {}, transition.box, {
      color: color.core.neutral[6],
      padding: unit / 2,
      borderRadius: ui.borderRadius,
      '@selectors': {
        ':not([disabled]):hover': {
          color: color.core.primary[3],
          backgroundColor: color.accent.bgHover
        }
      }
    }),
    button_active: {
      color: color.core.primary[3]
    },
    button_inverted: {
      color: color.base
    },
    button_disabled: _extends({}, pattern.disabled)
  };
})(IconButton);