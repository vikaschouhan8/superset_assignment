import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { mutuallyExclusiveTrueProps, forbidExtraProps } from 'airbnb-prop-types';
import withStyles from '../../composers/withStyles';
import { STATUSES } from '../../constants';
const statusPropType = mutuallyExclusiveTrueProps(...STATUSES);

/** A table row that contains multiple cells. */
export class TableRow extends React.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      danger,
      info,
      muted,
      notice,
      styles,
      success,
      warning
    } = _this$props,
          props = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "danger", "info", "muted", "notice", "styles", "success", "warning"]);

    return React.createElement("tr", _extends({}, props, {
      className: cx(danger && styles.row_danger, info && styles.row_info, muted && styles.row_muted, notice && styles.row_notice, success && styles.row_success, warning && styles.row_warning)
    }), children);
  }

}

_defineProperty(TableRow, "propTypes", {
  children: _pt.any.isRequired,
  danger: statusPropType,
  info: statusPropType,
  muted: statusPropType,
  notice: statusPropType,
  success: statusPropType,
  warning: statusPropType
});

_defineProperty(TableRow, "defaultProps", {
  danger: false,
  info: false,
  muted: false,
  notice: false,
  success: false,
  warning: false
});

export default withStyles((_ref) => {
  let {
    color
  } = _ref;

  function createRow(hex) {
    return {
      // Overrides table specificity
      '@selectors': {
        ':nth-child(n) > td': {
          backgroundColor: hex
        }
      }
    };
  }

  return {
    row_danger: createRow(color.core.danger[0]),
    row_info: createRow(color.core.primary[0]),
    row_muted: createRow(color.core.neutral[0]),
    row_notice: createRow(color.core.secondary[0]),
    row_success: createRow(color.core.success[0]),
    row_warning: createRow(color.core.warning[0])
  };
})(TableRow);