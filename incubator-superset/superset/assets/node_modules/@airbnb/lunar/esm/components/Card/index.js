import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import Content from './Content';
import useStyles from '../../hooks/useStyles';
export { Content };

const styleSheet = (_ref) => {
  let {
    color,
    pattern
  } = _ref;
  return {
    card: _extends({}, pattern.box, {
      background: color.accent.bg,
      overflow: 'hidden'
    }),
    card_overflow: {
      overflow: 'visible'
    }
  };
};

/**
 * An abstract layout to use as a base for cards.
 */
export default function Card(_ref2) {
  let {
    children,
    overflow
  } = _ref2;
  const [styles, cx] = useStyles(styleSheet);
  return React.createElement("div", {
    className: cx(styles.card, overflow && styles.card_overflow)
  }, children);
}
Card.propTypes = {
  children: _pt.any.isRequired,
  overflow: _pt.bool
};