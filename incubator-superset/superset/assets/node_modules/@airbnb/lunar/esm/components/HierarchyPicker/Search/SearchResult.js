import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import groupBy from 'lodash/groupBy';
import withStyles from '../../../composers/withStyles';
import Text from '../../Text';
import Highlight from './Highlight';
export class SearchResult extends React.Component {
  render() {
    const {
      cx,
      styles,
      item,
      formattedParents,
      matches,
      query
    } = this.props;
    const {
      description,
      label,
      name
    } = item;
    const mbk = groupBy(matches, 'key');
    const [labelMatch = null] = mbk.label || [];
    const [descMatch = null] = mbk.description || [];
    const [keywMatch = null] = mbk.keywords || [];
    const [longest] = query.split(/\s{1,}/).sort((a, b) => b.length - a.length);
    return React.createElement("div", {
      className: cx(styles.resultItem)
    }, React.createElement(Text, {
      bold: true
    }, formattedParents, React.createElement(Highlight, {
      word: longest,
      match: labelMatch,
      fallback: label || name
    })), description && React.createElement(Text, null, React.createElement(Highlight, {
      word: longest,
      match: descMatch,
      fallback: description
    })), keywMatch && React.createElement(Text, null, React.createElement(Highlight, {
      word: longest,
      match: keywMatch
    })));
  }

}

_defineProperty(SearchResult, "propTypes", {
  item: _pt.any.isRequired,
  formattedParents: _pt.string.isRequired,
  matches: _pt.arrayOf(_pt.any),
  query: _pt.string
});

_defineProperty(SearchResult, "defaultProps", {
  matches: [],
  query: ''
});

export default withStyles((_ref) => {
  let {
    color,
    unit
  } = _ref;
  return {
    resultItem: {
      padding: unit,
      wordBreak: 'break-word'
    }
  };
})(SearchResult);