import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

/** Horizontally align `ProfilePhoto`s in a stacked fashion. */
export class ProfilePhotoGroup extends React.Component {
  render() {
    const {
      cx,
      children,
      max,
      size,
      styles,
      theme
    } = this.props;
    const {
      unit
    } = theme;
    const margin = {
      marginLeft: -(size * (unit / 2.5))
    };
    let photos = React.Children.toArray(children).filter(child => !!child);
    let remainder = 0;

    if (max && photos.length > max) {
      remainder = photos.length - max;
      photos = photos.slice(0, max);
    }

    return React.createElement("div", {
      className: cx(styles.group)
    }, photos.map((photo, i) => React.createElement("div", {
      key: i,
      className: cx(styles.cell, margin)
    }, React.cloneElement(photo, {
      size,
      inline: false,
      square: false
    }))), remainder > 0 && React.createElement("div", {
      key: "remainder",
      className: cx(styles.cell, margin)
    }, React.createElement("div", {
      className: cx(styles.remainder, {
        height: size * unit,
        maxHeight: size * unit,
        maxWidth: size * unit,
        width: size * unit
      })
    }, React.createElement("span", {
      className: cx(styles.remainderNumber)
    }, "+" + remainder))));
  }

}

_defineProperty(ProfilePhotoGroup, "propTypes", {
  children: _pt.any.isRequired,
  max: _pt.number,
  size: _pt.number
});

_defineProperty(ProfilePhotoGroup, "defaultProps", {
  max: 3,
  size: 5
});

export default withStyles((_ref) => {
  let {
    color,
    font
  } = _ref;
  return {
    group: {
      display: 'flex',
      alignItems: 'stretch'
    },
    cell: {
      borderRadius: '50%',
      border: "1px solid " + color.base,
      background: color.core.neutral[6],
      ':first-of-type': {
        marginLeft: 0
      },
      ':empty': {
        display: 'none'
      }
    },
    remainder: _extends({}, font.textRegular, {
      position: 'relative'
    }),
    remainderNumber: {
      transform: 'translate(-50%, -50%)',
      position: 'absolute',
      top: '50%',
      left: '50%',
      color: color.base
    }
  };
}, {
  passThemeProp: true
})(ProfilePhotoGroup);