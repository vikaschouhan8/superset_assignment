import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';
import ProgressBar from '../ProgressBar';
import Tooltip from '../Tooltip';

/** An individual step within a stepped progress bar. */
export class Step extends React.Component {
  render() {
    const {
      cx,
      complete,
      first,
      last,
      label,
      styles
    } = this.props;
    const bar = React.createElement(ProgressBar, {
      leading: first || !first && !last,
      trailing: last || !first && !last,
      percent: complete ? 100 : 0
    });
    return React.createElement("div", {
      className: cx(styles.step)
    }, label ? React.createElement(Tooltip, {
      content: label
    }, bar) : bar);
  }

}

_defineProperty(Step, "propTypes", {
  complete: _pt.bool,
  first: _pt.bool,
  label: _pt.node,
  last: _pt.bool
});

_defineProperty(Step, "defaultProps", {
  complete: false,
  first: false,
  label: null,
  last: false
});

export default withStyles(() => ({
  step: {
    flexGrow: 1,
    marginRight: 2,
    ':last-child': {
      marginRight: 0
    },
    '@selectors': {
      // Fix tooltips mixed with flexbox
      '> *': {
        display: 'block',
        width: '100%'
      }
    }
  }
}))(Step);