import _pt from "prop-types";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import withStyles from '../../composers/withStyles';

class AdaptiveGrid extends React.PureComponent {
  render() {
    const {
      breakpoints,
      children,
      cx,
      defaultItemsPerRow,
      noGutter,
      styles
    } = this.props;
    const childElements = children && React.Children.map(children, (child, idx) => child ? // These items are generic and don't have a guaranteed id or any unique property
    // eslint-disable-next-line react/no-array-index-key
    React.createElement("div", {
      key: idx
    }, child) : null);
    const breakpointStyles = {};
    const breakpointKeys = Object.keys(breakpoints);
    const smallestBreakpoint = breakpointKeys.reduce((min, key) => Math.min(min, parseInt(key, 10)), 10000);
    breakpointKeys.forEach(breakpoint => {
      breakpointStyles["@media (min-width: " + breakpoint + "px)"] = {
        gridTemplateColumns: "repeat(" + breakpoints[breakpoint] + ", 1fr)"
      };
    });
    breakpointStyles[breakpointKeys.length > 0 ? "@media (max-width: " + smallestBreakpoint + "px)" : '@media (min-width: 0px)'] = {
      gridTemplateColumns: "repeat(" + defaultItemsPerRow + ", 1fr)"
    };
    return React.createElement("div", {
      className: cx(styles.container, noGutter && styles.container_noGutter, breakpointStyles)
    }, childElements);
  }

}

_defineProperty(AdaptiveGrid, "propTypes", {
  children: _pt.node,
  breakpoints: _pt.objectOf(_pt.number),
  defaultItemsPerRow: _pt.number,
  noGutter: _pt.bool
});

_defineProperty(AdaptiveGrid, "defaultProps", {
  breakpoints: {},
  defaultItemsPerRow: 1,
  noGutter: false
});

export default withStyles((_ref) => {
  let {
    unit
  } = _ref;
  return {
    container: {
      display: 'grid',
      gridGap: 2 * unit
    },
    container_noGutter: {
      gridGap: 0
    }
  };
})(AdaptiveGrid);