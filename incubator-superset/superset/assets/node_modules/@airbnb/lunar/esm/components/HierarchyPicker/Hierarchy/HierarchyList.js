import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import Text from '../../Text';
import withStyles from '../../../composers/withStyles';
import HierarchyItem from './HierarchyItem';
import ItemDescription from './ItemDescription';
export class HierarchyList extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", React.createRef());

    _defineProperty(this, "handleDomFocusDeeper", () => {
      const {
        verticallyAlign
      } = this.props;
      const li = this.closestRowToActiveElement();
      let deeper;

      if (verticallyAlign) {
        // next HierarchyList is a sibling
        const ul = li && li.parentElement;
        const parentDiv = ul && ul.parentElement;
        const nextMenu = parentDiv && parentDiv.nextElementSibling;
        deeper = nextMenu && nextMenu.querySelector('[tabindex]');
      } else {
        // next HierarchyList is a child
        const ul = li && li.lastElementChild;
        deeper = ul && ul.querySelector('[tabindex]');
      }

      if (deeper) {
        deeper.focus();
      }
    });

    _defineProperty(this, "handleDomFocusShallower", () => {
      const {
        verticallyAlign
      } = this.props;
      const li = this.closestRowToActiveElement();
      let shallower;

      if (verticallyAlign) {
        // prev HierarchyList is a sibling
        const ul = li && li.parentElement;
        const parentDiv = ul && ul.parentElement;
        const prevMenu = parentDiv && parentDiv.previousElementSibling; // focused parent tabIndex is higher than other parents

        shallower = prevMenu && prevMenu.querySelector('[tabindex="1"]');
      } else {
        // prev HierarchyList is a parent
        const parentLi = li && li.parentElement && li.parentElement.closest('li');
        shallower = parentLi && parentLi.querySelector('[tabindex]');
      }

      if (shallower) {
        shallower.focus();
      }
    });
  }

  isChosen(definition) {
    const {
      chosen
    } = this.props;
    return definition.every((name, i) => chosen[i] === name);
  }
  /** Returns the closest <li> to the current document activeElement */


  closestRowToActiveElement() {
    const {
      activeElement
    } = document;

    if (!activeElement || !activeElement.closest || !this.ref.current) {
      return null;
    }

    return activeElement.closest('li');
  }

  renderAside(item) {
    const {
      cx,
      styles,
      parents = [],
      onItemPicked,
      width,
      verticallyAlign
    } = this.props;

    if (item.items || !item.description) {
      return null;
    }

    return React.createElement("aside", {
      className: cx(styles.pane, // descriptions are always nested
      styles.pane_nested, !verticallyAlign && styles.pane_verticallyOffset, styles.aside, {
        width
      })
    }, React.createElement("button", {
      className: cx(styles.asideButton),
      onClick: () => onItemPicked([...parents, item.name]),
      tabIndex: -1,
      type: "button"
    }, React.createElement(ItemDescription, {
      item: item
    })));
  }

  render() {
    const _ref = this.props,
          {
      cx,
      focus,
      items,
      styles,
      parents,
      verticallyAlign
    } = _ref,
          passThruProps = _objectWithoutPropertiesLoose(_ref, ["cx", "focus", "items", "styles", "parents", "verticallyAlign"]);

    if (items.length === 0) {
      return null;
    }

    const [focusName, ...focusRest] = focus;
    const {
      maxHeight,
      width
    } = passThruProps;
    const isNested = parents.length > 0; // Track focused item to render as a sibling if vertically aligned

    let focusedItem;
    let currentSection;
    return React.createElement(React.Fragment, null, React.createElement("div", {
      key: "list",
      className: cx(styles.pane, verticallyAlign && styles.pane_verticallyAlign, isNested && styles.pane_nested, isNested && !verticallyAlign && styles.pane_verticallyOffset, {
        width,
        maxHeight: verticallyAlign ? maxHeight : undefined,
        zIndex: 1
      }),
      ref: this.ref
    }, React.createElement("ul", {
      className: cx(styles.list)
    }, items.map((item, index) => {
      const {
        name,
        section
      } = item;
      const definition = parents.concat(name);
      const isFocused = name === focusName;
      const shouldRenderSection = typeof section === 'string' && section !== currentSection;
      focusedItem = verticallyAlign && isFocused ? item : focusedItem;
      currentSection = shouldRenderSection ? section : currentSection;
      return React.createElement(React.Fragment, {
        key: item.name
      }, shouldRenderSection && index > 0 ? React.createElement("li", {
        className: cx(styles.divider)
      }) : null, shouldRenderSection && section ? React.createElement("li", {
        className: cx(styles.sectionHeader)
      }, React.createElement(Text, {
        small: true,
        bold: true,
        uppercased: true
      }, section)) : null, React.createElement("li", {
        className: cx(styles.row)
      }, React.createElement(HierarchyItem, _extends({}, passThruProps, {
        onDomFocusDeeper: this.handleDomFocusDeeper,
        onDomFocusShallower: this.handleDomFocusShallower,
        item: item,
        definition: definition,
        selected: this.isChosen(definition),
        focused: isFocused
      })), !verticallyAlign && isFocused && item.items && item.items.length > 0 ? React.createElement(HierarchyList, _extends({}, passThruProps, {
        cx: cx,
        styles: styles,
        items: item.items,
        focus: focusRest,
        parents: parents.concat(item.name),
        verticallyAlign: false
      })) : !verticallyAlign && isFocused && this.renderAside(item)));
    }))), verticallyAlign && focusedItem && focusedItem.items && focusedItem.items.length > 0 ? React.createElement(HierarchyList, _extends({
      key: "sub-list"
    }, passThruProps, {
      cx: cx,
      styles: styles,
      items: focusedItem.items,
      focus: focusRest,
      parents: parents.concat(focusedItem.name),
      verticallyAlign: true
    })) : verticallyAlign && focusedItem && this.renderAside(focusedItem));
  }

}

_defineProperty(HierarchyList, "propTypes", {
  items: _pt.arrayOf(_pt.any),
  chosen: _pt.any,
  focus: _pt.any.isRequired,
  maxHeight: _pt.number,
  renderItem: _pt.any,
  parents: _pt.any,
  onSubtree: _pt.func.isRequired,
  onItemPicked: _pt.func.isRequired,
  width: _pt.number,
  verticallyAlign: _pt.bool
});

_defineProperty(HierarchyList, "defaultProps", {
  chosen: [],
  items: [],
  parents: [],
  verticallyAlign: false
});

export default withStyles((_ref2) => {
  let {
    color,
    pattern,
    unit,
    ui
  } = _ref2;
  return {
    pane: {
      display: 'flex',
      borderRadius: ui.borderRadius
    },
    pane_verticallyAlign: {
      overflowY: 'auto',
      borderRadius: 0
    },
    pane_nested: {
      borderLeft: ui.border
    },
    pane_verticallyOffset: {
      position: 'absolute',
      overflow: 'visible',
      top: 0,
      marginLeft: -2,
      transform: 'translateX(100%)',
      background: color.accent.bg,
      border: ui.border,
      boxShadow: ui.boxShadowMedium
    },
    list: {
      flex: 1,
      listStyleType: 'none',
      padding: 0,
      margin: 0
    },
    sectionHeader: {
      padding: 1.5 * unit + "px " + 3 * unit + "px"
    },
    divider: {
      borderBottom: ui.border,
      marginTop: 0.5 * unit,
      marginBottom: 0.5 * unit
    },
    aside: {
      flex: 1,
      alignItems: 'flex-start',
      overflow: 'auto',
      wordBreak: 'break-word'
    },
    asideButton: _extends({}, pattern.resetButton, {
      flex: 1,
      padding: unit * 2,
      textAlign: 'left',
      cursor: 'help'
    }),
    row: {
      position: 'relative'
    }
  };
})(HierarchyList);