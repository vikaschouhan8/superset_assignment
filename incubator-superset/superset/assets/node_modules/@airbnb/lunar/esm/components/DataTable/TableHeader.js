import _pt from "prop-types";
import React from 'react';
import withStyles from '../../composers/withStyles';
import Button from '../Button';
import ButtonGroup from '../ButtonGroup';
import Text from '../Text';
import Translate from '../Translate';

/** Header for the DataTable that displays a title and Table-level buttons. */
export function TableHeader(_ref) {
  let {
    cx,
    editable,
    editMode,
    extraHeaderButtons,
    height,
    instantEdit,
    onEnactEdits,
    onEnableEditMode,
    onDisableEditMode,
    selectedRows,
    styles,
    tableHeaderLabel,
    width
  } = _ref;
  const extraEditButtons = extraHeaderButtons.map(btnConfig => btnConfig.displayEditMode && React.createElement(Button, {
    small: true,
    inverted: true,
    onClick: btnConfig.onClick && btnConfig.onClick(selectedRows),
    key: btnConfig.label
  }, btnConfig.label));
  const extraNonEditButtons = extraHeaderButtons.map(btnConfig => btnConfig.display && React.createElement(Button, {
    small: true,
    inverted: true,
    onClick: btnConfig.onClick && btnConfig.onClick(selectedRows),
    key: btnConfig.label
  }, btnConfig.label));
  const extraButtons = editMode ? extraEditButtons : extraNonEditButtons;
  const editModeButtons = instantEdit ? React.createElement(Button, {
    small: true,
    onClick: onDisableEditMode,
    key: "Done"
  }, React.createElement(Translate, {
    k: "lunar.common.done",
    phrase: "Done",
    context: "This button exits edit mode."
  })) : [React.createElement(Button, {
    small: true,
    inverted: true,
    onClick: onDisableEditMode,
    key: "Cancel"
  }, React.createElement(Translate, {
    k: "lunar.common.cancel",
    phrase: "Cancel",
    context: "This button cancels out of edit mode without applying changes."
  })), React.createElement(Button, {
    small: true,
    onClick: onEnactEdits,
    key: "Apply"
  }, React.createElement(Translate, {
    k: "lunar.common.apply",
    phrase: "Apply",
    context: "This button applies all live edits."
  }))];
  const modeButtons = editMode ? editModeButtons : React.createElement(Button, {
    inverted: true,
    small: true,
    onClick: onEnableEditMode
  }, React.createElement(Translate, {
    k: "lunar.common.edit",
    phrase: "Edit",
    context: "This button enables edit mode."
  }));
  const headerButtons = extraHeaderButtons.length > -1 || editable ? React.createElement(ButtonGroup, null, extraButtons, editable && modeButtons) : null;
  const dimensionStyles = {
    width,
    height
  };
  const label = React.createElement(Text, {
    bold: true
  }, tableHeaderLabel);
  return React.createElement("div", {
    style: dimensionStyles
  }, React.createElement("div", {
    className: cx(styles.tableHeader_inner)
  }, label, headerButtons));
}
TableHeader.propTypes = {
  editable: _pt.bool,
  editMode: _pt.bool.isRequired,
  height: _pt.number.isRequired,
  instantEdit: _pt.bool.isRequired,
  tableHeaderLabel: _pt.string,
  width: _pt.number.isRequired,
  onEnableEditMode: _pt.func.isRequired,
  onDisableEditMode: _pt.func.isRequired,
  onEnactEdits: _pt.func.isRequired,
  extraHeaderButtons: _pt.arrayOf(_pt.any),
  selectedRows: _pt.any.isRequired
};
export default withStyles((_ref2) => {
  let {
    unit,
    color,
    ui
  } = _ref2;
  return {
    tableHeader_inner: {
      background: color.accent.bg,
      display: 'flex',
      alignItems: 'center',
      height: '100%',
      justifyContent: 'space-between',
      paddingLeft: 2 * unit,
      paddingRight: 2 * unit,
      borderBottom: ui.border
    }
  };
})(TableHeader);