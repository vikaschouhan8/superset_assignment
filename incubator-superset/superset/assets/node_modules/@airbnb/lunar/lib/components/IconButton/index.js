"use strict";

exports.__esModule = true;
exports.default = exports.IconButton = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _iconComponent = _interopRequireDefault(require("../../prop-types/iconComponent"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A button with an icon as content, and an optional tooltip. */
class IconButton extends _react.default.Component {
  render() {
    const _this$props = this.props,
          {
      cx,
      children,
      active,
      disabled,
      inverted,
      tooltip,
      styles
    } = _this$props,
          restProps = _objectWithoutPropertiesLoose(_this$props, ["cx", "children", "active", "disabled", "inverted", "tooltip", "styles"]);

    const button = _react.default.createElement(_ButtonOrLink.default, _extends({}, restProps, {
      disabled: disabled,
      className: cx(styles.button, active && styles.button_active, inverted && styles.button_inverted, disabled && styles.button_disabled)
    }), children);

    return tooltip ? _react.default.createElement(_Tooltip.default, {
      content: tooltip,
      disabled: disabled
    }, button) : button;
  }

}

exports.IconButton = IconButton;

_defineProperty(IconButton, "propTypes", {
  tooltip: _propTypes.default.node,
  inverted: _propTypes.default.bool,
  active: _propTypes.default.bool,
  beforeIcon: _propTypes.default.node,
  afterIcon: _propTypes.default.node,
  children: _iconComponent.default.isRequired
});

_defineProperty(IconButton, "defaultProps", {
  active: false,
  disabled: false,
  inverted: false,
  tooltip: null
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    pattern,
    ui,
    unit,
    transition
  } = _ref;
  return {
    button: _extends({}, pattern.resetButton, {}, transition.box, {
      color: color.core.neutral[6],
      padding: unit / 2,
      borderRadius: ui.borderRadius,
      '@selectors': {
        ':not([disabled]):hover': {
          color: color.core.primary[3],
          backgroundColor: color.accent.bgHover
        }
      }
    }),
    button_active: {
      color: color.core.primary[3]
    },
    button_inverted: {
      color: color.base
    },
    button_disabled: _extends({}, pattern.disabled)
  };
})(IconButton);

exports.default = _default;