"use strict";

exports.__esModule = true;
exports.default = exports.Table = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _withBoundary = _interopRequireDefault(require("../../composers/withBoundary"));

var _Cell = _interopRequireDefault(require("./Cell"));

exports.Cell = _Cell.default;

var _Row = _interopRequireDefault(require("./Row"));

exports.Row = _Row.default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A responsive table for displaying tabular data. */
class Table extends _react.default.Component {
  render() {
    const {
      cx,
      bordered,
      children,
      compact,
      fixed,
      horizontal,
      loading,
      middleAlign,
      striped,
      styles,
      transparent,
      vertical
    } = this.props;
    return _react.default.createElement("div", {
      className: cx(styles.responsive_wrapper)
    }, _react.default.createElement("table", {
      className: cx(styles.table, middleAlign && styles.content_middle_align, fixed && styles.table_fixed, bordered && styles.table_bordered, horizontal && styles.table_horizontal, vertical && styles.table_vertical, compact && styles.table_compact, striped && styles.table_striped, loading && styles.table_loading, transparent && styles.table_transparent)
    }, children));
  }

}

exports.Table = Table;

_defineProperty(Table, "propTypes", {
  bordered: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  compact: _propTypes.default.bool,
  fixed: _propTypes.default.bool,
  horizontal: _propTypes.default.bool,
  loading: _propTypes.default.bool,
  middleAlign: _propTypes.default.bool,
  striped: _propTypes.default.bool,
  trackingName: _propTypes.default.string,
  transparent: _propTypes.default.bool,
  vertical: _propTypes.default.bool
});

_defineProperty(Table, "defaultProps", {
  bordered: false,
  compact: false,
  fixed: false,
  horizontal: false,
  loading: false,
  middleAlign: false,
  striped: false,
  transparent: false,
  vertical: false
});

var _default = (0, _withBoundary.default)('Table')((0, _withStyles.default)((_ref) => {
  let {
    color,
    ui,
    unit
  } = _ref;

  function createCell(styles) {
    return {
      '@selectors': {
        ':only-child td': styles,
        ':only-child th': styles
      }
    };
  }

  return {
    table: {
      width: '100%',
      maxWidth: '100%',
      margin: 0,
      padding: 0,
      backgroundColor: color.accent.bg,
      border: '1px solid transparent',
      borderCollapse: 'collapse',
      borderSpacing: 0,
      '@selectors': {
        ':only-child td': {
          padding: unit * 1.5,
          verticalAlign: 'top'
        },
        ':only-child th': {
          padding: unit * 1.5,
          verticalAlign: 'bottom',
          whiteSpace: 'nowrap'
        }
      }
    },
    table_bordered: {
      border: ui.border
    },
    table_compact: _extends({}, createCell({
      padding: unit
    })),
    table_horizontal: {
      '@selectors': {
        ':only-child > tbody > tr > td': {
          borderTop: ui.border
        }
      }
    },
    table_fixed: {
      display: 'table',
      tableLayout: 'fixed'
    },
    table_loading: {
      pointerEvents: 'none',
      opacity: 0.5
    },
    table_striped: {
      '@selectors': {
        ':only-child > tbody > tr': {
          backgroundColor: color.accent.bg,
          '@selectors': {
            ':nth-child(odd)': {
              backgroundColor: color.accent.bgHover
            }
          }
        }
      }
    },
    table_transparent: {
      backgroundColor: 'transparent'
    },
    table_vertical: _extends({}, createCell({
      borderLeft: ui.border,
      borderRight: ui.border
    })),
    responsive_wrapper: {
      maxWidth: '100%',
      overflowX: 'auto'
    },
    content_middle_align: {
      '@selectors': {
        ':only-child td': {
          verticalAlign: 'middle'
        }
      }
    }
  };
})(Table));

exports.default = _default;