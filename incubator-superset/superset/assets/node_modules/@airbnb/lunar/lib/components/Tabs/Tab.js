"use strict";

exports.__esModule = true;
exports.default = exports.Tab = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _upperFirst = _interopRequireDefault(require("lodash/upperFirst"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ButtonOrLink = _interopRequireDefault(require("../private/ButtonOrLink"));

var _TrackingBoundary = _interopRequireDefault(require("../TrackingBoundary"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A single tab button. Usually rendered amongst a collection of tabs. */
class Tab extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", () => {
      if (this.props.onClick) {
        this.props.onClick(this.props.keyName);
      }
    });
  }

  componentDidUpdate(prevProps) {
    if (!prevProps.selected && this.props.selected && this.props.onSelected) {
      this.props.onSelected();
    }
  }

  render() {
    const {
      cx,
      afterIcon,
      beforeIcon,
      borderless,
      disabled,
      href,
      keyName,
      label,
      selected,
      small,
      stretched,
      styles
    } = this.props;
    const trackingName = (0, _upperFirst.default)((0, _camelCase.default)(keyName || 'Tab'));
    return _react.default.createElement("span", {
      className: cx(styles.tab, disabled && styles.tab_disabled, borderless && styles.tab_borderless, selected && styles.tab_selected, stretched && styles.tab_stretched)
    }, _react.default.createElement(_TrackingBoundary.default, {
      name: trackingName
    }, _react.default.createElement(_ButtonOrLink.default, {
      flexAlign: true,
      "aria-selected": selected,
      afterIcon: afterIcon,
      beforeIcon: beforeIcon,
      disabled: disabled,
      href: href,
      role: "tab",
      onClick: disabled ? undefined : this.handleClick,
      className: cx(styles.tabButton, small && styles.tabButton_small, selected && styles.tabButton_active)
    }, label)));
  }

}

exports.Tab = Tab;

_defineProperty(Tab, "propTypes", {
  borderless: _propTypes.default.bool,
  children: _propTypes.default.node,
  keyName: _propTypes.default.string,
  label: _propTypes.default.any.isRequired,
  onClick: _propTypes.default.func,
  onSelected: _propTypes.default.func,
  selected: _propTypes.default.bool,
  small: _propTypes.default.bool,
  stretched: _propTypes.default.bool
});

_defineProperty(Tab, "defaultProps", {
  borderless: false,
  children: null,
  selected: false,
  small: false,
  stretched: false
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    font,
    pattern,
    unit,
    ui,
    transition
  } = _ref;
  return {
    tab: {
      borderBottom: ui.borderThick,
      marginRight: unit * 4,
      marginBottom: -2,
      ':hover': {
        borderColor: color.accent.borderHover
      },
      ':last-child': {
        marginRight: 0
      }
    },
    tab_borderless: {
      borderColor: color.clear
    },
    tab_selected: {
      borderColor: color.accent.borderActive,
      ':hover': {
        borderColor: color.accent.borderActive
      }
    },
    tab_stretched: {
      flex: 1
    },
    tab_disabled: _extends({}, pattern.disabled, {
      borderColor: color.accent.border,
      ':hover': {
        borderColor: color.accent.border
      }
    }),
    tabButton: _extends({}, font.textReset, {}, font.textRegular, {}, transition.box, {
      background: color.accent.bg,
      color: color.accent.text,
      display: 'flex',
      alignItems: 'center',
      paddingTop: unit,
      paddingBottom: unit,
      border: 0,
      cursor: 'pointer',
      textAlign: 'left',
      textDecoration: 'none',
      whiteSpace: 'nowrap',
      width: '100%',
      fontWeight: font.weights.bold,
      borderTopLeftRadius: ui.borderRadius,
      borderTopRightRadius: ui.borderRadius
    }),
    tabButton_small: _extends({}, font.textSmall),
    tabButton_active: {
      color: color.accent.textActive
    }
  };
})(Tab);

exports.default = _default;