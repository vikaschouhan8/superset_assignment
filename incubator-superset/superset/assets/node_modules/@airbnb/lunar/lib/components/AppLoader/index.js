"use strict";

exports.__esModule = true;
exports.default = exports.AppLoader = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ErrorMessage = _interopRequireDefault(require("../ErrorMessage"));

var _Loader = _interopRequireDefault(require("../Loader"));

var _Title = _interopRequireDefault(require("../Title"));

var _Text = _interopRequireDefault(require("../Text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A loading indicator, representing the state of a request, for applications and landing pages. */
class AppLoader extends _react.default.Component {
  render() {
    const {
      cx,
      centered,
      children,
      error,
      errorTitle,
      failureText,
      fetched,
      loadingText,
      small,
      styles,
      subtitle
    } = this.props;

    if (fetched && !error) {
      return _react.default.createElement("main", null, children);
    }

    return _react.default.createElement("div", {
      className: cx(styles.appLoader, centered && styles.appLoader_centered)
    }, _react.default.createElement(_Title.default, {
      level: small ? 3 : 1
    }, error ? failureText : loadingText), subtitle && _react.default.createElement("div", {
      className: cx(styles.subtitle)
    }, _react.default.createElement(_Text.default, {
      large: !small
    }, subtitle)), _react.default.createElement("div", {
      className: cx(styles.errorOrLoader)
    }, error ? _react.default.createElement(_ErrorMessage.default, {
      error: error,
      title: errorTitle
    }) : _react.default.createElement(_Loader.default, {
      inline: true
    })));
  }

}

exports.AppLoader = AppLoader;

_defineProperty(AppLoader, "propTypes", {
  centered: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  error: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.oneOf([null])]),
  errorTitle: _propTypes.default.node,
  failureText: _propTypes.default.any.isRequired,
  fetched: _propTypes.default.bool,
  loadingText: _propTypes.default.any.isRequired,
  small: _propTypes.default.bool,
  subtitle: _propTypes.default.node
});

_defineProperty(AppLoader, "defaultProps", {
  centered: false,
  small: false,
  subtitle: null
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    unit
  } = _ref;
  return {
    appLoader: {
      padding: unit * 10
    },
    appLoader_centered: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center'
    },
    subtitle: {
      marginTop: unit
    },
    errorOrLoader: {
      marginTop: unit * 1.5,
      maxWidth: '65%'
    }
  };
})(AppLoader);

exports.default = _default;