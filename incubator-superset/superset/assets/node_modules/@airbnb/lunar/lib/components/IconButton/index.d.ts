import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
import { Props as ButtonOrLinkProps } from '../private/ButtonOrLink';
export declare type Props = ButtonOrLinkProps & {
    /** @ignore */
    afterIcon?: React.ReactNode;
    /** @ignore */
    beforeIcon?: React.ReactNode;
    /** Mark as active. */
    active?: boolean;
    /** Invert text colors. */
    inverted?: boolean;
    /** Wrap the button in a tooltip. */
    tooltip?: React.ReactNode;
};
/** A button with an icon as content, and an optional tooltip. */
export declare class IconButton extends React.Component<Props & WithStylesProps> {
    static propTypes: {
        children: import("prop-types").Validator<React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>>;
    };
    static defaultProps: {
        active: boolean;
        disabled: boolean;
        inverted: boolean;
        tooltip: null;
    };
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, ButtonOrLinkProps & {
    /** @ignore */
    afterIcon?: React.ReactNode;
    /** @ignore */
    beforeIcon?: React.ReactNode;
    /** Mark as active. */
    active?: boolean | undefined;
    /** Invert text colors. */
    inverted?: boolean | undefined;
    /** Wrap the button in a tooltip. */
    tooltip?: React.ReactNode;
} & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map