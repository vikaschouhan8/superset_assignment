"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconChevronLeft = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronLeft"));

var _IconChevronRight = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconChevronRight"));

var _IconCheck = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconCheck"));

var _withStyles = _interopRequireDefault(require("../../../composers/withStyles"));

var _keys = require("../../../keys");

var _DirectionalIcon = _interopRequireDefault(require("../../DirectionalIcon"));

var _Text = _interopRequireDefault(require("../../Text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ICON_SIZE = 18;

class HierarchyItem extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "maybePick", () => {
      const {
        onItemPicked,
        item,
        definition
      } = this.props;

      if (item.readonly) {
        onItemPicked(null);
        this.goDeeper();
      } else {
        onItemPicked(definition);
      }
    });

    _defineProperty(this, "goDeeper", () => {
      const {
        onSubtree,
        onDomFocusDeeper,
        definition,
        item
      } = this.props;

      if (item.items || item.description) {
        onSubtree(definition, onDomFocusDeeper, true);
      }
    });

    _defineProperty(this, "goShallower", () => {
      const {
        onSubtree,
        onDomFocusShallower,
        definition
      } = this.props;
      onDomFocusShallower();
      onSubtree(definition.slice(0, -2), undefined, true);
    });

    _defineProperty(this, "handleClick", () => {
      this.maybePick();
    });

    _defineProperty(this, "handleMouseMove", () => {
      const {
        onSubtree,
        definition
      } = this.props;
      onSubtree(definition);
    });

    _defineProperty(this, "handleKeyDown", event => {
      switch (event.key) {
        case _keys.ENTER:
        case _keys.SPACE:
          this.maybePick();
          break;

        case _keys.ARROW_RIGHT:
          this.goDeeper();
          break;

        case _keys.ARROW_LEFT:
          this.goShallower();
          break;

        default:
          break;
      }
    });

    _defineProperty(this, "renderItem", () => {
      const {
        cx,
        focused,
        item,
        styles,
        selected,
        renderItem,
        theme
      } = this.props;
      return renderItem ? renderItem(item, selected, focused) : _react.default.createElement(_react.default.Fragment, null, selected && _react.default.createElement("span", {
        className: cx(styles.checkmark)
      }, _react.default.createElement(_IconCheck.default, {
        decorative: true,
        color: theme.color.core.primary[3],
        size: ICON_SIZE
      })), _react.default.createElement("span", {
        className: cx(styles.label)
      }, _react.default.createElement(_Text.default, null, item.label || item.name)));
    });
  }

  render() {
    const {
      cx,
      focused,
      item,
      styles,
      selected
    } = this.props;
    return _react.default.createElement("div", {
      className: cx(styles.item, focused && styles.item_focused, item.readonly && styles.item_readonly),
      role: "option",
      "aria-selected": selected,
      onMouseMove: this.handleMouseMove,
      onClick: this.handleClick,
      onKeyDown: this.handleKeyDown // this is needed to find a focused parent item in a vertically aligned list
      ,
      tabIndex: focused ? 1 : 0
    }, this.renderItem(), item.items && _react.default.createElement(_DirectionalIcon.default, {
      direction: "right",
      left: _IconChevronLeft.default,
      right: _IconChevronRight.default,
      size: "1.4em",
      decorative: true,
      inline: true
    }));
  }

}

_defineProperty(HierarchyItem, "propTypes", {
  item: _propTypes.default.any.isRequired,
  definition: _propTypes.default.any.isRequired,
  renderItem: _propTypes.default.any,
  selected: _propTypes.default.bool.isRequired,
  focused: _propTypes.default.bool.isRequired,
  onSubtree: _propTypes.default.func.isRequired,
  onItemPicked: _propTypes.default.func.isRequired,
  onDomFocusDeeper: _propTypes.default.func.isRequired,
  onDomFocusShallower: _propTypes.default.func.isRequired
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    unit,
    ui
  } = _ref;
  return {
    item: {
      display: 'flex',
      alignItems: 'center',
      padding: unit + "px " + 1.5 * unit + "px " + unit + "px " + 2.75 * unit + "px",
      cursor: 'pointer',
      position: 'relative',
      borderRadius: ui.borderRadius,
      '@selectors': {
        ':hover, :focus': {
          backgroundColor: color.accent.bgHover,
          outline: 'none'
        }
      }
    },
    item_focused: {
      backgroundColor: color.accent.bgHover
    },
    item_readonly: {
      cursor: 'initial'
    },
    label: {
      flexGrow: 1
    },
    checkmark: {
      position: 'absolute',
      left: 0.25 * unit + 1,
      top: ICON_SIZE / 2 + 1
    }
  };
}, {
  passThemeProp: true
})(HierarchyItem);

exports.default = _default;