"use strict";

exports.__esModule = true;
exports.default = exports.DatePicker = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactDayPicker = _interopRequireDefault(require("react-day-picker"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _datePickerStyles = _interopRequireDefault(require("../private/datePickerStyles"));

var _getMonths = _interopRequireDefault(require("../../utils/getMonths"));

var _getWeekdays = _interopRequireDefault(require("../../utils/getWeekdays"));

var _datePicker = require("../../utils/datePicker");

var _NavBar = _interopRequireDefault(require("./Picker/NavBar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Display a date picker.
 * Utilizes [react-day-picker](http://react-day-picker.js.org/api/DayPicker/).
 */
class DatePicker extends _react.default.Component {
  render() {
    const {
      cx,
      disabledDays,
      firstDayOfWeek,
      fromMonth,
      initialMonth,
      locale,
      modifiers,
      month,
      numberOfMonths,
      onBlur,
      onDayClick,
      onDayMouseEnter,
      onFocus,
      onMonthChange,
      onResetClick,
      onTodayButtonClick,
      pagedNavigation,
      pickerRef,
      selectedDays,
      showResetButton,
      styles,
      todayButton,
      toMonth
    } = this.props;
    return _react.default.createElement(_reactDayPicker.default, {
      ref: pickerRef,
      fixedWeeks: Boolean(numberOfMonths && numberOfMonths > 1),
      classNames: (0, _datePicker.getClassNames)('calendar', styles, this.props),
      disabledDays: disabledDays,
      firstDayOfWeek: firstDayOfWeek,
      fromMonth: fromMonth,
      initialMonth: initialMonth,
      locale: locale,
      modifiers: (0, _datePicker.getCustomModifiers)(modifiers, styles, cx),
      month: month,
      months: (0, _getMonths.default)(),
      navbarElement: props => _react.default.createElement(_NavBar.default, _extends({}, props, {
        noFooter: !todayButton,
        showResetButton: showResetButton,
        onResetClick: onResetClick
      })),
      numberOfMonths: numberOfMonths,
      onBlur: onBlur,
      onDayClick: onDayClick,
      onDayMouseEnter: onDayMouseEnter,
      onFocus: onFocus,
      onMonthChange: onMonthChange,
      onTodayButtonClick: onTodayButtonClick,
      pagedNavigation: pagedNavigation,
      selectedDays: selectedDays,
      todayButton: todayButton,
      toMonth: toMonth,
      weekdaysLong: (0, _getWeekdays.default)('long', true),
      weekdaysShort: (0, _getWeekdays.default)('short', true)
    });
  }

}

exports.DatePicker = DatePicker;

_defineProperty(DatePicker, "propTypes", {
  locale: _propTypes.default.any,
  pickerRef: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.any, _propTypes.default.oneOf([null])]),
  showResetButton: _propTypes.default.bool,
  onResetClick: _propTypes.default.func
});

_defineProperty(DatePicker, "defaultProps", {
  firstDayOfWeek: 0,
  numberOfMonths: 1,
  pagedNavigation: false
});

var _default = (0, _withStyles.default)(_datePickerStyles.default)(DatePicker);

exports.default = _default;