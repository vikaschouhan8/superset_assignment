"use strict";

exports.__esModule = true;
exports.default = renderDataColumns;

var _react = _interopRequireDefault(require("react"));

var _reactVirtualized = require("react-virtualized");

var _DefaultRenderer = _interopRequireDefault(require("../DefaultRenderer"));

var _Spacing = _interopRequireDefault(require("../../Spacing"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderDataColumns(keys, editMode, onEdit, _ref) {
  let {
    columnMetadata,
    showColumnDividers,
    cx,
    styles,
    renderers,
    zebra,
    theme,
    selectable,
    expandable
  } = _ref;

  const renderCell = (key, isLeftmost) => row => {
    const {
      metadata
    } = row.rowData;
    const {
      isChild
    } = metadata;
    const customRenderer = renderers && renderers[key];
    const indentSize = !expandable || !isLeftmost ? 2 : 2.5;
    const spacing = isChild || !((expandable || selectable) && isLeftmost) ? indentSize : 0;
    const rendererArguments = {
      row,
      keyName: key,
      editMode,
      onEdit,
      zebra: zebra || false,
      theme
    };

    if (metadata && metadata.colSpanKey && renderers) {
      if (isLeftmost) {
        const colSpanRenderer = renderers[metadata.colSpanKey];

        if (colSpanRenderer) {
          return _react.default.createElement(colSpanRenderer, rendererArguments);
        }
      }
    }

    const contents = _react.default.createElement(customRenderer || _DefaultRenderer.default, rendererArguments);

    return _react.default.createElement("div", {
      className: cx(styles && styles.row)
    }, _react.default.createElement("div", {
      className: cx(styles && styles.row_inner)
    }, _react.default.createElement(_Spacing.default, {
      left: spacing,
      right: 2
    }, contents || '')));
  };

  return keys.map((key, idx) => {
    const widthPropertiesOptions = ['maxWidth', 'minWidth', 'width', 'flexGrow', 'flexShrink'];
    const widthProperties = {};
    widthPropertiesOptions.forEach(property => {
      widthProperties[property] = columnMetadata && columnMetadata[key] !== undefined && columnMetadata[key][property] !== undefined ? columnMetadata[key][property] : _constants.DEFAULT_WIDTH_PROPERTIES[property];
    });
    const isLeftmost = idx === 0;
    const isRightmost = idx === keys.length - 1;
    return _react.default.createElement(_reactVirtualized.Column, {
      dataKey: key,
      key: key,
      label: key,
      width: widthProperties.width,
      flexGrow: widthProperties.flexGrow,
      flexShrink: widthProperties.flexShrink,
      maxWidth: widthProperties.maxWidth,
      minWidth: widthProperties.minWidth,
      cellRenderer: renderCell(key, isLeftmost),
      className: cx(styles && styles.column, showColumnDividers && !isRightmost && styles && styles.column_divider)
    });
  });
}