"use strict";

exports.__esModule = true;
exports.default = exports.AccordionItem = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _ExpandableIcon = _interopRequireDefault(require("../ExpandableIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * A single accordion item. To be rendered amongst a collection of accordion items, within an accordion.
 */
class AccordionItem extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleClick", () => {
      if (this.props.onClick) {
        this.props.onClick(this.props.index);
      }
    });
  }

  render() {
    const {
      cx,
      bordered,
      children,
      expanded,
      id,
      styles,
      theme,
      title
    } = this.props;
    return _react.default.createElement("div", {
      className: cx(styles.item, bordered && styles.item_bordered)
    }, _react.default.createElement("button", {
      className: cx(styles.title),
      "aria-controls": "accordion-body-" + id,
      "aria-selected": expanded,
      id: "accordion-title-" + id,
      onClick: this.handleClick,
      role: "tab",
      tabIndex: 0,
      type: "button"
    }, title && _react.default.createElement("span", {
      className: cx(styles.titleText)
    }, title), _react.default.createElement(_ExpandableIcon.default, {
      expanded: !!expanded,
      size: theme.unit * 3
    })), _react.default.createElement("section", {
      className: cx(styles.body, expanded && styles.body_expanded),
      "aria-hidden": !expanded,
      "aria-labelledby": "accordion-title-" + id,
      id: "accordion-body-" + id,
      role: "tabpanel"
    }, children));
  }

}

exports.AccordionItem = AccordionItem;

_defineProperty(AccordionItem, "propTypes", {
  bordered: _propTypes.default.bool,
  children: _propTypes.default.node,
  expanded: _propTypes.default.bool,
  id: _propTypes.default.string.isRequired,
  index: _propTypes.default.number,
  title: _propTypes.default.node,
  onClick: _propTypes.default.func
});

_defineProperty(AccordionItem, "defaultProps", {
  bordered: false,
  children: null,
  expanded: false
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    pattern,
    ui,
    unit
  } = _ref;
  return {
    body: {
      display: 'none',
      padding: unit + "px " + unit * 2 + "px " + unit * 2 + "px"
    },
    body_expanded: {
      display: 'block'
    },
    item: {
      background: color.accent.bg
    },
    item_bordered: {
      borderTop: ui.border
    },
    title: _extends({}, pattern.resetButton, {
      display: 'flex',
      alignItems: 'center',
      padding: unit * 2,
      textAlign: 'left',
      width: '100%'
    }),
    titleText: {
      flex: '1'
    }
  };
}, {
  passThemeProp: true
})(AccordionItem);

exports.default = _default;