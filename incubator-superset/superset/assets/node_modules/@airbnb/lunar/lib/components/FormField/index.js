"use strict";

exports.__esModule = true;
exports.default = exports.FormField = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _Text = _interopRequireDefault(require("../Text"));

var _StatusText = _interopRequireDefault(require("../StatusText"));

var _FormErrorMessage = _interopRequireDefault(require("../FormErrorMessage"));

var _partitionFieldProps = _interopRequireDefault(require("./partitionFieldProps"));

exports.partitionFieldProps = _partitionFieldProps.default;

var _Prefix = _interopRequireDefault(require("./Prefix"));

exports.Prefix = _Prefix.default;

var _Suffix = _interopRequireDefault(require("./Suffix"));

exports.Suffix = _Suffix.default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A abstract form field wrapper that handles labels, affixes, errors, states, and more. */
class FormField extends _react.default.Component {
  render() {
    const {
      cx,
      children,
      compact,
      compactSpacing,
      disabled,
      errorMessage,
      hideLabel,
      hideOptionalLabel,
      id,
      inline,
      invalid,
      label,
      labelDescription,
      noSpacing,
      optional,
      renderBeforeLabel,
      renderFullWidth,
      renderLargeLabel,
      stretchLabel,
      styles,
      prefix,
      suffix,
      topAlign
    } = this.props;

    const content = _react.default.createElement("div", {
      className: cx(styles.input, inline && renderBeforeLabel && styles.input_beforeInline, inline && !renderBeforeLabel && styles.input_afterInline, hideLabel && styles.input_hideLabel, renderFullWidth && styles.input_fullWidth)
    }, prefix && _react.default.createElement("div", {
      className: cx(styles.affix)
    }, prefix), _react.default.createElement("div", {
      className: cx(styles.anchor)
    }, children), suffix && _react.default.createElement("div", {
      className: cx(styles.affix)
    }, suffix));

    return _react.default.createElement("section", {
      className: cx(styles.field, (compact || compactSpacing) && !noSpacing && styles.field_compactSpacing, noSpacing && styles.field_noSpacing)
    }, _react.default.createElement("div", {
      className: cx(inline && styles.content_inline, topAlign && styles.content_topAlign)
    }, renderBeforeLabel && content, _react.default.createElement("label", {
      htmlFor: id,
      className: cx(styles.label, stretchLabel && styles.label_stretch, hideLabel && styles.label_hidden, (inline || renderBeforeLabel) && styles.label_noSpacing)
    }, _react.default.createElement(_StatusText.default, {
      danger: invalid,
      muted: disabled,
      small: compact,
      bold: !renderLargeLabel
    }, label, optional && !hideOptionalLabel && _react.default.createElement("span", {
      className: cx(styles.optional)
    }, _react.default.createElement(_Text.default, {
      inline: true,
      small: true,
      muted: true
    }, _react.default.createElement(_Translate.default, {
      k: "lunar.form.optional",
      phrase: "(optional)",
      context: "A form field is marked as optional"
    })))), labelDescription && _react.default.createElement(_Text.default, {
      small: true
    }, labelDescription)), !renderBeforeLabel && content), invalid && _react.default.createElement(_FormErrorMessage.default, {
      id: id,
      error: errorMessage
    }));
  }

}

exports.FormField = FormField;

_defineProperty(FormField, "propTypes", {
  compact: _propTypes.default.bool,
  compactSpacing: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  errorMessage: _propTypes.default.string,
  field: _propTypes.default.any,
  hideLabel: _propTypes.default.bool,
  hideOptionalLabel: _propTypes.default.bool,
  inline: _propTypes.default.bool,
  invalid: _propTypes.default.bool,
  label: _propTypes.default.any.isRequired,
  labelDescription: _propTypes.default.node,
  noSpacing: _propTypes.default.bool,
  optional: _propTypes.default.bool,
  prefix: _propTypes.default.node,
  suffix: _propTypes.default.node,
  children: _propTypes.default.any.isRequired,
  id: _propTypes.default.string.isRequired,
  renderBeforeLabel: _propTypes.default.bool,
  renderFullWidth: _propTypes.default.bool,
  renderLargeLabel: _propTypes.default.bool,
  stretchLabel: _propTypes.default.bool,
  topAlign: _propTypes.default.bool
});

_defineProperty(FormField, "defaultProps", {
  compact: false,
  compactSpacing: false,
  disabled: false,
  errorMessage: '',
  hideLabel: false,
  hideOptionalLabel: false,
  inline: false,
  invalid: false,
  labelDescription: null,
  noSpacing: false,
  optional: false,
  prefix: null,
  renderBeforeLabel: false,
  renderFullWidth: false,
  renderLargeLabel: false,
  stretchLabel: false,
  suffix: null,
  topAlign: false
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    unit
  } = _ref;
  return {
    field: {
      marginBottom: unit * 3,
      '@selectors': {
        ':last-child, :only-child': {
          marginBottom: 0
        }
      }
    },
    field_compactSpacing: {
      marginBottom: unit * 2
    },
    field_noSpacing: {
      margin: 0
    },
    content_inline: {
      display: 'flex',
      alignItems: 'center'
    },
    content_topAlign: {
      alignItems: 'flext-start'
    },
    label: {
      margin: 0,
      marginBottom: unit,
      display: 'block',
      flexGrow: 0
    },
    label_stretch: {
      flexBasis: '100%'
    },
    label_hidden: {
      display: 'none'
    },
    label_noSpacing: {
      margin: 0
    },
    optional: {
      marginLeft: unit,
      display: 'inline-block'
    },
    input: {
      display: 'flex',
      position: 'relative',
      flexGrow: 1
    },
    input_fullWidth: {
      width: '100%'
    },
    input_beforeInline: {
      marginRight: unit
    },
    input_afterInline: {
      marginLeft: unit
    },
    input_hideLabel: {
      margin: 0
    },
    affix: {
      flexGrow: 0
    },
    anchor: {
      flexGrow: 1
    }
  };
})(FormField);

exports.default = _default;