"use strict";

exports.__esModule = true;
exports.default = exports.Col = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A column within a grid. */
class Col extends _react.default.Component {
  render() {
    const {
      cx,
      children,
      offset,
      span,
      styles
    } = this.props;
    return _react.default.createElement("div", {
      "data-span": span,
      "data-offset": offset,
      className: cx(styles.col, styles["span" + span], styles["offset" + offset])
    }, children);
  }

}

exports.Col = Col;

_defineProperty(Col, "propTypes", {
  children: _propTypes.default.any.isRequired,
  offset: _propTypes.default.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  span: _propTypes.default.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired
});

_defineProperty(Col, "defaultProps", {
  offset: 0
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    unit
  } = _ref;
  const spans = {};
  const offsets = {};
  Array.from({
    length: 12
  }, (v, k) => {
    const span = k + 1;
    const offset = k;
    const width = 100 / (12 / span);
    spans["span" + span] = {
      flexBasis: width + "%",
      maxWidth: width + "%"
    };
    offsets["offset" + offset] = {
      marginLeft: offset > 0 ? 100 / (12 / offset) + "%" : 0
    };
    return span;
  });
  return _extends({
    col: {
      flex: '0 0 auto',
      paddingLeft: unit,
      paddingRight: unit
    }
  }, spans, {}, offsets);
})(Col);

exports.default = _default;