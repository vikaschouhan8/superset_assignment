"use strict";

exports.__esModule = true;
exports.default = exports.Shimmer = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A loading indicator bar that shimmers. */
class Shimmer extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "randomWidth", this.props.width === 'random' ? Math.round(Math.random() * (90 - 30) + 30) + "%" : '');
  }

  render() {
    const {
      cx,
      block,
      height,
      radius,
      styles,
      width
    } = this.props;
    return _react.default.createElement("span", {
      "aria-busy": "true",
      style: {
        borderRadius: radius,
        width: this.randomWidth || width,
        height
      },
      className: cx(styles.shimmer, block && styles.shimmer_block)
    });
  }

}

exports.Shimmer = Shimmer;

_defineProperty(Shimmer, "propTypes", {
  block: _propTypes.default.bool,
  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  radius: _propTypes.default.string
});

_defineProperty(Shimmer, "defaultProps", {
  block: false,
  height: '1.25ex',
  radius: '0.125em',
  width: '60%'
});

var _default = (0, _withStyles.default)(() => ({
  shimmer: {
    animationDirection: 'alternate',
    animationDuration: '1s',
    animationFillMode: 'forwards',
    animationIterationCount: 'infinite',
    animationName: {
      name: 'shimmer',
      from: {
        opacity: 0.1
      },
      to: {
        opacity: 0.3
      }
    },
    animationTimingFunction: 'ease-in-out',
    backgroundColor: 'currentColor',
    display: 'inline-block',
    position: 'relative',
    verticalAlign: 'middle'
  },
  shimmer_block: {
    display: 'block'
  }
}))(Shimmer);

exports.default = _default;