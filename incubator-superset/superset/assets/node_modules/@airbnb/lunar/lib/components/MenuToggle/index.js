"use strict";

exports.__esModule = true;
exports.default = exports.MenuToggle = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _iconComponent = _interopRequireDefault(require("../../prop-types/iconComponent"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _Button = _interopRequireDefault(require("../Button"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ExpandableIcon = _interopRequireDefault(require("../ExpandableIcon"));

var _Dropdown = _interopRequireDefault(require("../Dropdown"));

var _Menu = _interopRequireWildcard(require("../Menu"));

exports.Item = _Menu.Item;
exports.Separator = _Menu.Separator;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** A controller for multiple tabs. */
class MenuToggle extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", _react.default.createRef());

    _defineProperty(this, "state", {
      opened: false
    });

    _defineProperty(this, "handleItemClick", onClick => {
      if (onClick) {
        onClick();
      }

      this.handleHideMenu();
    });

    _defineProperty(this, "handleToggleMenu", () => {
      if (this.state.opened) {
        this.handleHideMenu();
      } else {
        this.handleShowMenu();
      }
    });

    _defineProperty(this, "handleShowMenu", () => {
      this.setState({
        opened: true
      });

      if (this.props.onShow) {
        this.props.onShow();
      }
    });

    _defineProperty(this, "handleHideMenu", () => {
      this.setState({
        opened: false
      });

      if (this.props.onHide) {
        this.props.onHide();
      }
    });

    _defineProperty(this, "handleClickOutside", event => {
      if (!this.state.opened || this.props.ignoreClickOutside) {
        return;
      } // Let the button handle itself


      const {
        current
      } = this.ref;

      if (current && current.contains(event.target)) {
        return;
      }

      this.handleHideMenu();
    });
  }

  render() {
    const {
      opened
    } = this.state;
    const {
      cx,
      accessibilityLabel,
      children,
      closeOnClick,
      dropdownProps = {
        right: 0
      },
      inverted,
      large,
      menuProps,
      small,
      styles,
      toggleIcon,
      toggleLabel,
      zIndex
    } = this.props;
    let iconSize = '1.5em';

    if (large) {
      iconSize = '2em';
    } else if (small) {
      iconSize = '1em';
    }

    return _react.default.createElement("div", {
      className: cx(styles.container),
      ref: this.ref
    }, toggleIcon ? _react.default.createElement(_IconButton.default, {
      "aria-label": accessibilityLabel,
      onClick: this.handleToggleMenu
    }, toggleIcon) : _react.default.createElement(_Button.default, {
      afterIcon: _react.default.createElement(_ExpandableIcon.default, {
        expanded: opened,
        size: iconSize
      }),
      inverted: inverted,
      large: large,
      small: small,
      onClick: this.handleToggleMenu
    }, toggleLabel), _react.default.createElement("div", {
      className: cx(styles.dropdown, !opened && styles.dropdown_hidden, {
        zIndex
      }),
      "aria-expanded": opened
    }, _react.default.createElement(_Dropdown.default, _extends({}, dropdownProps, {
      onClickOutside: this.handleClickOutside,
      visible: opened
    }), _react.default.createElement("div", {
      className: cx(styles.menu)
    }, _react.default.createElement(_Menu.default, _extends({
      minWidth: 250,
      maxHeight: 300,
      accessibilityLabel: accessibilityLabel
    }, menuProps), closeOnClick ? _react.default.Children.map(children, child => {
      if (!child || !child.props) {
        return null;
      }

      return _react.default.cloneElement(child, {
        onClick: () => this.handleItemClick(child.props.onClick)
      });
    }) : children)))));
  }

}

exports.MenuToggle = MenuToggle;

_defineProperty(MenuToggle, "propTypes", {
  zIndex: _propTypes.default.number,
  toggleLabel: _propTypes.default.any.isRequired,
  small: _propTypes.default.bool,
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  menuProps: _propTypes.default.any,
  large: _propTypes.default.bool,
  inverted: _propTypes.default.bool,
  ignoreClickOutside: _propTypes.default.bool,
  dropdownProps: _propTypes.default.any,
  closeOnClick: _propTypes.default.bool,
  accessibilityLabel: _propTypes.default.string.isRequired,
  children: (0, _airbnbPropTypes.childrenOfType)(_Menu.Item, _Menu.Separator, 'li').isRequired,
  toggleIcon: _iconComponent.default
});

_defineProperty(MenuToggle, "defaultProps", {
  closeOnClick: false,
  ignoreClickOutside: false,
  inverted: false,
  large: false,
  small: false,
  zIndex: 1
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    unit,
    transition
  } = _ref;
  return {
    container: {
      display: 'inline-block',
      position: 'relative'
    },
    dropdown: _extends({}, transition.fade, {
      visibility: 'visible',
      position: 'relative'
    }),
    dropdown_hidden: {
      opacity: 0,
      visibility: 'hidden',
      userSelect: 'none'
    },
    menu: {
      marginTop: unit
    },
    controls: {
      display: 'flex',
      justifyContent: 'space-between'
    }
  };
})(MenuToggle);

exports.default = _default;