"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _IconClose = _interopRequireDefault(require("@airbnb/lunar-icons/lib/interface/IconClose"));

var _withStyles = _interopRequireDefault(require("../../../composers/withStyles"));

var _Text = _interopRequireDefault(require("../../Text"));

var _Title = _interopRequireDefault(require("../../Title"));

var _IconButton = _interopRequireDefault(require("../../IconButton"));

var _Translate = _interopRequireDefault(require("../../Translate"));

var _useTheme = _interopRequireDefault(require("../../../hooks/useTheme"));

var _constants = require("../../../constants");

var _toRGBA = _interopRequireDefault(require("../../../utils/toRGBA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** A Dialog component with a backdrop and a standardized layout. */
function ModalInnerContent(_ref) {
  let {
    children,
    cx,
    footer,
    large,
    small,
    onClose,
    scrollable,
    styles,
    subtitle,
    title
  } = _ref;
  const theme = (0, _useTheme.default)();
  const withHeader = Boolean(title || subtitle);
  const withFooter = Boolean(footer);
  return _react.default.createElement("div", {
    className: cx(styles.wrapper)
  }, withHeader && _react.default.createElement("header", {
    className: cx(styles.header, scrollable && styles.header_scrollable)
  }, title && _react.default.createElement(_Title.default, {
    level: 3
  }, title), subtitle && _react.default.createElement(_Text.default, {
    muted: true
  }, subtitle)), _react.default.createElement("div", {
    className: cx(styles.close, !withHeader && styles.close_float)
  }, _react.default.createElement(_IconButton.default, {
    onClick: onClose
  }, _react.default.createElement(_IconClose.default, {
    accessibilityLabel: _Translate.default.phrase('Close', {}, {
      context: 'Close a modal popup',
      key: 'lunar.common.close'
    }),
    color: theme.color.muted,
    size: theme.unit * 3
  }))), _react.default.createElement("div", {
    className: cx(styles.body, !withHeader && styles.body_paddingTop, !withFooter && styles.body_paddingBottom, scrollable && styles.body_scrollable, small && scrollable && styles.body_scrollableSmall, large && scrollable && styles.body_scrollableLarge)
  }, children), footer && _react.default.createElement("footer", {
    className: cx(styles.footer, scrollable && styles.footer_scrollable)
  }, footer));
}

ModalInnerContent.propTypes = {
  children: _propTypes.default.any.isRequired,
  footer: _propTypes.default.node,
  large: _propTypes.default.bool,
  scrollable: _propTypes.default.bool,
  small: _propTypes.default.bool,
  subtitle: _propTypes.default.node,
  title: _propTypes.default.node,
  onClose: _propTypes.default.func.isRequired
};

var _default = (0, _withStyles.default)((_ref2) => {
  let {
    color,
    ui,
    unit
  } = _ref2;
  return {
    wrapper: {
      position: 'relative'
    },
    header: {
      padding: unit * 3 + "px " + unit * 4 + "px " + unit * 3 + "px " + unit * 3 + "px"
    },
    header_scrollable: {
      position: 'relative',
      ':after': {
        content: '" "',
        position: 'absolute',
        top: '100%',
        left: 0,
        right: 0,
        height: unit / 2,
        background: "linear-gradient(" + (0, _toRGBA.default)(color.core.neutral[6], 15) + ", " + (0, _toRGBA.default)(color.core.neutral[6], 0) + ")"
      }
    },
    close: {
      position: 'absolute',
      top: unit * 2,
      right: unit * 2,
      zIndex: _constants.Z_INDEX_MODAL
    },
    close_float: {
      float: 'right',
      position: 'relative',
      top: 0,
      right: 0,
      margin: unit * 2 + "px " + unit * 2 + "px " + unit / 2 + "px " + unit / 2 + "px"
    },
    body: {
      padding: "0 " + unit * 3 + "px"
    },
    body_paddingBottom: {
      paddingBottom: unit * 3
    },
    body_paddingTop: {
      paddingTop: unit * 3
    },
    body_scrollable: {
      paddingBottom: unit * 3,
      maxHeight: 300,
      overflow: 'auto',
      ':before': {
        content: '" "',
        position: 'sticky',
        display: 'block',
        width: "calc(100% + " + unit * 6 + "px)",
        marginLeft: -unit * 3,
        height: unit / 2,
        background: color.accent.bg
      }
    },
    body_scrollableSmall: {
      maxHeight: 160
    },
    body_scrollableLarge: {
      maxHeight: 500
    },
    footer: {
      padding: unit * 3
    },
    footer_scrollable: {
      borderTop: ui.border
    }
  };
})(ModalInnerContent);

exports.default = _default;