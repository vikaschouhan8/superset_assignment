import React from 'react';
import { WithStylesProps } from '../../composers/withStyles';
import partitionFieldProps from './partitionFieldProps';
import Prefix from './Prefix';
import Suffix from './Suffix';
export declare type Props = {
    /** Decrease label font size and spacing. */
    compact?: boolean;
    /** @ignore Decrease bottom margin of the field. (Internal use only) */
    compactSpacing?: boolean;
    /** Mark the field as disabled. */
    disabled?: boolean;
    /** Error message to display under the input when invalid. */
    errorMessage?: string;
    /** @ignore Passed from final form. */
    field?: any;
    /** Visually hide the label. */
    hideLabel?: boolean;
    /** @ignore Hide optional label. (Internal use only) */
    hideOptionalLabel?: boolean;
    /** Render the input and label inline to each other. */
    inline?: boolean;
    /** Mark the field as invalid. */
    invalid?: boolean;
    /** Descriptive label that appears above the input. */
    label: NonNullable<React.ReactNode>;
    /** Small description to display under the label. */
    labelDescription?: React.ReactNode;
    /** Remove bottom margin from field. */
    noSpacing?: boolean;
    /** Mark the field as optional. */
    optional?: boolean;
    /** Content to display before the input field. */
    prefix?: React.ReactNode;
    /** Content to display after the input field. */
    suffix?: React.ReactNode;
};
export declare type PrivateProps = Props & WithStylesProps & {
    /** Input field to wrap. */
    children: NonNullable<React.ReactNode>;
    /** Unique ID of the field. */
    id: string;
    /** @ignore Render the input field before the label. */
    renderBeforeLabel?: boolean;
    /** @ignore Render the input field as 100% width. */
    renderFullWidth?: boolean;
    /** @ignore Render the labels with large text. Should only be used for nested components, like through controllers. */
    renderLargeLabel?: boolean;
    /** @ignore Stretches the label to 100%. */
    stretchLabel?: boolean;
    /** @ignore Top align content. */
    topAlign?: boolean;
};
export { partitionFieldProps, Prefix, Suffix };
/** A abstract form field wrapper that handles labels, affixes, errors, states, and more. */
export declare class FormField extends React.Component<PrivateProps> {
    static defaultProps: {
        compact: boolean;
        compactSpacing: boolean;
        disabled: boolean;
        errorMessage: string;
        hideLabel: boolean;
        hideOptionalLabel: boolean;
        inline: boolean;
        invalid: boolean;
        labelDescription: null;
        noSpacing: boolean;
        optional: boolean;
        prefix: null;
        renderBeforeLabel: boolean;
        renderFullWidth: boolean;
        renderLargeLabel: boolean;
        stretchLabel: boolean;
        suffix: null;
        topAlign: boolean;
    };
    render(): JSX.Element;
}
declare const _default: import("aesthetic-react").StyledComponent<import("../../types").Theme, Props & {
    /** Input field to wrap. */
    children: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal;
    /** Unique ID of the field. */
    id: string;
    /** @ignore Render the input field before the label. */
    renderBeforeLabel?: boolean | undefined;
    /** @ignore Render the input field as 100% width. */
    renderFullWidth?: boolean | undefined;
    /** @ignore Render the labels with large text. Should only be used for nested components, like through controllers. */
    renderLargeLabel?: boolean | undefined;
    /** @ignore Stretches the label to 100%. */
    stretchLabel?: boolean | undefined;
    /** @ignore Top align content. */
    topAlign?: boolean | undefined;
} & import("aesthetic-react").WithStylesWrapperProps>;
export default _default;
//# sourceMappingURL=index.d.ts.map