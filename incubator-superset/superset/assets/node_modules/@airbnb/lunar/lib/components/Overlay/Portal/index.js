"use strict";

exports.__esModule = true;
exports.default = exports.Portal = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _withStyles = _interopRequireDefault(require("../../../composers/withStyles"));

var _FocusTrap = _interopRequireDefault(require("../../FocusTrap"));

var _Portal = _interopRequireDefault(require("../../Portal"));

var _keys = require("../../../keys");

var _constants = require("../../../constants");

var _toRGBA = _interopRequireDefault(require("../../../utils/toRGBA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Portal extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      height: 0
    });

    _defineProperty(this, "ref", _react.default.createRef());

    _defineProperty(this, "handleClick", event => {
      if (event.target === this.ref.current) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === _keys.ESCAPE) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleResize", () => {
      this.props.onResize();
    });

    _defineProperty(this, "handleResizeThrottled", (0, _throttle.default)(
    /* istanbul ignore next */
    () => this.handleResize(), 100));

    _defineProperty(this, "handleScroll", () => {
      const {
        current
      } = this.ref;

      if (current && !this.props.noBackground) {
        this.setState(state => ({
          height: Math.max(current.scrollHeight, state.height)
        }));
      }
    });

    _defineProperty(this, "handleScrollThrottled", (0, _throttle.default)(
    /* istanbul ignore next */
    () => this.handleScroll(), 100));
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
    window.addEventListener('resize', this.handleResizeThrottled);

    if (!this.props.noBackground) {
      document.body.style.overflow = 'hidden';
    }
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
    window.removeEventListener('resize', this.handleResizeThrottled);

    if (!this.props.noBackground) {
      document.body.style.overflow = '';
    }
  }

  render() {
    const {
      cx,
      children,
      styles,
      x,
      y,
      noBackground
    } = this.props;
    const {
      height
    } = this.state;
    return _react.default.createElement(_Portal.default, null, _react.default.createElement(_FocusTrap.default, null, _react.default.createElement("div", {
      className: cx(styles.container, noBackground ? styles.noBg : styles.opaque),
      ref: this.ref,
      role: "presentation",
      onClick: this.handleClick,
      onScroll: this.handleScrollThrottled
    }, _react.default.createElement("div", {
      className: cx(styles.content, {
        paddingTop: y,
        marginLeft: x,
        minHeight: height
      })
    }, children))));
  }

}

exports.Portal = Portal;

_defineProperty(Portal, "propTypes", {
  children: _propTypes.default.node,
  noBackground: _propTypes.default.bool.isRequired,
  onClose: _propTypes.default.func.isRequired,
  onResize: _propTypes.default.func.isRequired,
  x: _propTypes.default.number,
  y: _propTypes.default.number
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color
  } = _ref;
  return {
    container: {
      position: 'fixed',
      zIndex: _constants.Z_INDEX_PORTAL,
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      overflow: 'auto',
      userSelect: 'none'
    },
    noBg: {
      pointerEvents: 'none',
      overflow: 'hidden'
    },
    opaque: {
      backgroundColor: (0, _toRGBA.default)(color.core.neutral[6], 30)
    },
    content: {
      width: 0,
      overflow: 'visible'
    }
  };
})(Portal);

exports.default = _default;