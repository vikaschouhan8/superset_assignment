"use strict";

exports.__esModule = true;
exports.default = exports.StatusLabel = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _iconComponent = _interopRequireDefault(require("../../prop-types/iconComponent"));

var _IconAffix = _interopRequireDefault(require("../private/IconAffix"));

var _constants = require("../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const statusPropType = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)(..._constants.STATUSES, ..._constants.BRANDS);

/** Classify content through the use of tiny colorful status labels. */
class StatusLabel extends _react.default.Component {
  render() {
    const {
      cx,
      afterIcon,
      beforeIcon,
      bordered,
      children,
      compact,
      danger,
      info,
      inverted,
      luxury,
      muted,
      notice,
      plus,
      styles,
      success,
      uppercased,
      warning
    } = this.props;
    return _react.default.createElement("span", {
      className: cx(styles.label, uppercased && styles.label_uppercased, inverted && styles.label_inverted, bordered && styles.label_bordered, compact && styles.label_compact, danger && (inverted ? styles.label_inverted_danger : styles.label_danger), info && (inverted ? styles.label_inverted_info : styles.label_info), muted && (inverted ? styles.label_inverted_muted : styles.label_muted), notice && (inverted ? styles.label_inverted_notice : styles.label_notice), success && (inverted ? styles.label_inverted_success : styles.label_success), warning && (inverted ? styles.label_inverted_warning : styles.label_warning), luxury && (inverted ? styles.label_inverted_luxury : styles.label_luxury), plus && (inverted ? styles.label_inverted_plus : styles.label_plus))
    }, beforeIcon && _react.default.createElement(_IconAffix.default, {
      before: true
    }, beforeIcon), _react.default.createElement("span", null, children), afterIcon && _react.default.createElement(_IconAffix.default, {
      after: true
    }, afterIcon));
  }

}

exports.StatusLabel = StatusLabel;

_defineProperty(StatusLabel, "propTypes", {
  uppercased: _propTypes.default.bool,
  inverted: _propTypes.default.bool,
  compact: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  bordered: _propTypes.default.bool,
  afterIcon: _iconComponent.default,
  beforeIcon: _iconComponent.default,
  danger: statusPropType,
  info: statusPropType,
  luxury: statusPropType,
  muted: statusPropType,
  notice: statusPropType,
  plus: statusPropType,
  success: statusPropType,
  warning: statusPropType
});

_defineProperty(StatusLabel, "defaultProps", {
  afterIcon: null,
  beforeIcon: null,
  bordered: false,
  compact: false,
  danger: false,
  info: false,
  inverted: false,
  luxury: false,
  muted: false,
  notice: false,
  plus: false,
  success: false,
  uppercased: false,
  warning: false
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    font,
    ui,
    unit
  } = _ref;
  return {
    label: _extends({}, font.textMicro, {
      display: 'inline-block',
      justifyContent: 'space-between',
      alignItems: 'center',
      verticalAlign: 'middle',
      whiteSpace: 'nowrap',
      marginRight: unit / 2,
      paddingLeft: unit,
      paddingRight: unit,
      paddingTop: unit / 2,
      paddingBottom: unit / 2,
      borderRadius: ui.borderRadius,
      backgroundColor: color.core.neutral[1],
      color: color.accent.text,
      fontWeight: font.weights.bold,
      border: ui.border,
      borderColor: 'transparent'
    }),
    label_uppercased: {
      textTransform: 'uppercase',
      letterSpacing: 1
    },
    label_bordered: {
      borderColor: color.accent.border
    },
    label_compact: {
      paddingLeft: 0.75 * unit,
      paddingRight: 0.75 * unit,
      paddingTop: unit / 4,
      paddingBottom: unit / 4
    },
    label_inverted: {
      backgroundColor: color.clear,
      color: color.accent.text
    },
    label_danger: {
      backgroundColor: color.core.danger[1]
    },
    label_inverted_danger: {
      color: color.core.danger[3]
    },
    label_info: {
      backgroundColor: color.core.primary[1]
    },
    label_inverted_info: {
      color: color.core.primary[3]
    },
    label_luxury: {
      backgroundColor: color.brand.luxury[3],
      color: color.base
    },
    label_inverted_luxury: {
      color: color.brand.luxury[3]
    },
    label_muted: {
      backgroundColor: color.core.neutral[2]
    },
    label_inverted_muted: {
      color: color.core.neutral[3]
    },
    label_notice: {
      backgroundColor: color.core.secondary[1]
    },
    label_inverted_notice: {
      color: color.core.secondary[3]
    },
    label_plus: {
      backgroundColor: color.brand.plus[3],
      color: color.base
    },
    label_inverted_plus: {
      color: color.brand.plus[3]
    },
    label_success: {
      backgroundColor: color.core.success[1]
    },
    label_inverted_success: {
      color: color.core.success[3]
    },
    label_warning: {
      backgroundColor: color.core.warning[1]
    },
    label_inverted_warning: {
      color: color.core.warning[6]
    }
  };
})(StatusLabel);

exports.default = _default;