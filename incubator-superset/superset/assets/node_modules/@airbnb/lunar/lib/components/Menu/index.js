"use strict";

exports.__esModule = true;
exports.default = exports.Menu = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _Separator = _interopRequireDefault(require("./Separator"));

exports.Separator = _Separator.default;

var _Item = _interopRequireDefault(require("./Item"));

exports.Item = _Item.default;

var _Row = _interopRequireDefault(require("./Row"));

exports.Row = _Row.default;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** An abstract menu for use within dropdowns, selects, autocompletes, and more. */
class Menu extends _react.default.Component {
  render() {
    const {
      cx,
      accessibilityLabel,
      children,
      maxHeight,
      minWidth,
      overflow,
      role,
      styles
    } = this.props;
    const scrollable = !!maxHeight && !overflow;
    return _react.default.createElement("ul", {
      role: role,
      "aria-label": accessibilityLabel,
      className: cx(styles.menu, {
        maxHeight: scrollable ? maxHeight : 'auto',
        minWidth
      }, scrollable && styles.menu_scrollable)
    }, children);
  }

}

exports.Menu = Menu;

_defineProperty(Menu, "propTypes", {
  children: _propTypes.default.node,
  accessibilityLabel: _propTypes.default.string.isRequired,
  maxHeight: _propTypes.default.number,
  minWidth: _propTypes.default.number,
  role: _propTypes.default.string,
  overflow: _propTypes.default.bool
});

_defineProperty(Menu, "defaultProps", {
  children: null,
  minWidth: 200,
  overflow: false,
  role: 'menu'
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    ui,
    pattern,
    unit
  } = _ref;
  return {
    menu: _extends({}, pattern.box, {
      margin: 0,
      padding: unit + "px 0",
      backgroundColor: color.accent.bg,
      listStyle: 'none',
      '@selectors': {
        '> li': {
          position: 'relative'
        },
        // These are jank. Better way?
        '> li:first-child > *': {
          borderTopLeftRadius: ui.borderRadius,
          borderTopRightRadius: ui.borderRadius
        },
        '> li:last-child > *': {
          borderBottomLeftRadius: ui.borderRadius,
          borderBottomRightRadius: ui.borderRadius
        }
      }
    }),
    menu_scrollable: {
      overflowY: 'auto'
    }
  };
})(Menu);

exports.default = _default;