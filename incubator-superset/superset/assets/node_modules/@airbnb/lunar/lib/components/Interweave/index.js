"use strict";

exports.__esModule = true;
exports.default = exports.Interweave = exports.globalFilters = exports.globalMatchers = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _interweave = _interopRequireDefault(require("interweave"));

var _interweaveAutolink = require("interweave-autolink");

var _interweaveEmoji = _interopRequireWildcard(require("interweave-emoji"));

var _ = _interopRequireDefault(require("../.."));

var _Email = _interopRequireDefault(require("./factories/Email"));

var _Url = _interopRequireDefault(require("./factories/Url"));

var _transformer = _interopRequireDefault(require("./factories/transformer"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const globalMatchers = [];
exports.globalMatchers = globalMatchers;
const globalFilters = [];
exports.globalFilters = globalFilters;
const emojiOptions = {
  convertEmoticon: false,
  convertShortcode: true,
  convertUnicode: true,
  enlargeThreshold: 3
};
const urlMatcher = new _interweaveAutolink.UrlMatcher('url', {
  customTLDs: ['tools']
}, _Url.default);
const emailMatcher = new _interweaveAutolink.EmailMatcher('email', {}, _Email.default);
const emojiMatcher = new _interweaveEmoji.EmojiMatcher('emoji', emojiOptions);
const emojiMatcherWithEmoticons = new _interweaveEmoji.EmojiMatcher('emoji', _extends({}, emojiOptions, {
  convertEmoticon: true
}));

/**
 * Safely render HTML, filter attributes, autowrap text with matchers, render emoji characters,
 * and much more.
 */
class Interweave extends _react.default.PureComponent {
  render() {
    const _ref = this.props,
          {
      content,
      filters,
      matchers,
      onlyMatchers,
      withEmoticons
    } = _ref,
          props = _objectWithoutPropertiesLoose(_ref, ["content", "filters", "matchers", "onlyMatchers", "withEmoticons"]);

    const finalFilters = [...globalFilters, ...filters];
    let finalMatchers = [...globalMatchers, emailMatcher, urlMatcher, withEmoticons ? emojiMatcherWithEmoticons : emojiMatcher, ...matchers];

    if (onlyMatchers.length > 0) {
      finalMatchers = finalMatchers.filter(matcher => onlyMatchers.includes(matcher.propName));
    }

    return _react.default.createElement(_interweave.default, _extends({
      content: content,
      filters: finalFilters,
      matchers: finalMatchers,
      emojiPath: _.default.settings.emojiCDN,
      emojiSize: "1.25em",
      transform: _transformer.default,
      newWindow: true
    }, props));
  }

}

exports.Interweave = Interweave;

_defineProperty(Interweave, "propTypes", {
  large: _propTypes.default.bool,
  onlyMatchers: _propTypes.default.arrayOf(_propTypes.default.string),
  small: _propTypes.default.bool,
  withEmoticons: _propTypes.default.bool
});

_defineProperty(Interweave, "defaultProps", {
  content: '',
  filters: [],
  large: false,
  matchers: [],
  onlyMatchers: [],
  small: false,
  withEmoticons: false
});

var _default = (0, _interweaveEmoji.default)({
  alwaysRender: true,
  throwErrors: false
})(Interweave);

exports.default = _default;