"use strict";

exports.__esModule = true;
exports.default = exports.MessageItem = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _airbnbPropTypes = require("airbnb-prop-types");

var _withStyles = _interopRequireDefault(require("../../composers/withStyles"));

var _removeFocusOnMouseUp = _interopRequireDefault(require("../../utils/removeFocusOnMouseUp"));

var _ProfilePhoto = _interopRequireDefault(require("../ProfilePhoto"));

var _Shimmer = _interopRequireDefault(require("../Shimmer"));

var _Text = _interopRequireDefault(require("../Text"));

var _Spacing = _interopRequireDefault(require("../Spacing"));

var _Translate = _interopRequireDefault(require("../Translate"));

var _toRGBA = _interopRequireDefault(require("../../utils/toRGBA"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// add color flags here
const stripeColorTypePropType = (0, _airbnbPropTypes.mutuallyExclusiveTrueProps)('important', 'info', 'warning');

/** An individual comment within a message thread. */
class MessageItem extends _react.default.Component {
  render() {
    const {
      cx,
      children,
      disableTitleTranslation,
      email,
      formattedTimestamp,
      horizontalSpacing,
      icon,
      imageBadgeSrc,
      imageDescription,
      imageSrc,
      important,
      info,
      loadingAuthor,
      onClickImage,
      onClickTitle,
      sending,
      source,
      styles,
      title,
      titleClickDescription,
      titleTag,
      verticalSpacing,
      warning
    } = this.props;
    const timestamp = source ? _Translate.default.phrase('%{time} via %{source}', {
      time: formattedTimestamp,
      source
    }, {
      context: 'Timestamp and source within a message bubble',
      key: 'lunar.message.source'
    }) : formattedTimestamp;
    const striped = !!(important || info || warning);
    const containerStyles = cx(styles.container, horizontalSpacing && styles.container_horizontalSpacing, verticalSpacing && styles.container_verticalSpacing, striped && styles.container_withStripe, important && styles.container_important, info && styles.container_info, warning && styles.container_warning);
    const formatedTitle = disableTitleTranslation ? _react.default.createElement("span", {
      className: "notranslate"
    }, title) : title;

    if (loadingAuthor) {
      return _react.default.createElement("div", {
        className: containerStyles
      }, _react.default.createElement("div", {
        className: cx(styles.profilePhoto, styles.tableCell)
      }, _react.default.createElement(_Shimmer.default, {
        width: 32,
        height: 32,
        radius: "50%"
      })), _react.default.createElement("div", {
        className: cx(styles.messageBody, styles.tableCell)
      }, _react.default.createElement(_Spacing.default, {
        bottom: 0.5
      }, _react.default.createElement(_Spacing.default, {
        right: 1,
        inline: true
      }, _react.default.createElement(_Shimmer.default, {
        width: 175,
        height: 14
      })), _react.default.createElement(_Text.default, {
        inline: true,
        small: true,
        muted: true
      }, timestamp), email && _react.default.createElement(_Shimmer.default, {
        height: 12,
        width: 225
      })), children), sending && _react.default.createElement("div", {
        className: cx(styles.sendingOverlay)
      }));
    }

    let profilePhoto = null;

    if (imageSrc) {
      profilePhoto = _react.default.createElement(_ProfilePhoto.default, {
        imageSrc: imageSrc,
        size: 4,
        title: imageDescription || title
      });
    } else if (icon) {
      profilePhoto = _react.default.createElement(_Spacing.default, {
        left: 2,
        top: 0.5
      }, icon);
    }

    const avatar = imageBadgeSrc ? _react.default.createElement("div", null, profilePhoto, _react.default.createElement("div", {
      className: cx(styles.profileBadge)
    }, _react.default.createElement(_ProfilePhoto.default, {
      inline: true,
      imageSrc: imageBadgeSrc,
      size: 2,
      title: _Translate.default.phrase('Profile photo badge', {}, {
        context: 'Profile photo descriptive image text within a message bubble',
        key: 'lunar.message.photoLabel'
      })
    }))) : profilePhoto;
    return _react.default.createElement("div", {
      className: containerStyles
    }, _react.default.createElement("div", {
      className: cx(styles.table)
    }, _react.default.createElement("div", {
      className: cx(styles.profilePhoto, styles.tableCell)
    }, onClickImage ? _react.default.createElement("button", {
      className: cx(styles.resetButton),
      type: "button",
      title: imageDescription || title,
      onClick: onClickImage,
      onMouseUp: _removeFocusOnMouseUp.default
    }, avatar) : avatar), _react.default.createElement("div", {
      className: cx(styles.messageBody, styles.tableCell)
    }, _react.default.createElement(_Spacing.default, {
      bottom: 0.5
    }, _react.default.createElement("span", {
      className: cx(styles.messageTitle)
    }, onClickTitle ? _react.default.createElement("button", {
      className: cx(styles.resetButton),
      type: "button",
      title: titleClickDescription || title,
      onClick: onClickTitle,
      onMouseUp: _removeFocusOnMouseUp.default
    }, _react.default.createElement(_Text.default, {
      inline: true,
      bold: true
    }, formatedTitle)) : _react.default.createElement(_Text.default, {
      inline: true,
      bold: true
    }, formatedTitle)), titleTag && _react.default.createElement("span", {
      className: cx(styles.tag)
    }, _react.default.createElement(_Text.default, {
      inline: true,
      micro: true,
      muted: true
    }, titleTag)), _react.default.createElement(_Text.default, {
      inline: true,
      small: true,
      muted: true
    }, timestamp), email && _react.default.createElement(_Text.default, {
      small: true,
      muted: true
    }, _react.default.createElement(_Translate.default, {
      k: "lunar.message.fromUser",
      phrase: "From: %{email}",
      email: email,
      context: "Who the message is from",
      html: true
    }))), _react.default.createElement("div", {
      className: cx(styles.messageBodyContent)
    }, children))), sending && _react.default.createElement("div", {
      className: cx(styles.sendingOverlay)
    }));
  }

}

exports.MessageItem = MessageItem;

_defineProperty(MessageItem, "propTypes", {
  verticalSpacing: _propTypes.default.bool,
  titleTag: _propTypes.default.string,
  titleClickDescription: _propTypes.default.string,
  title: _propTypes.default.string.isRequired,
  source: _propTypes.default.string,
  sending: _propTypes.default.bool,
  onClickTitle: _propTypes.default.func,
  onClickImage: _propTypes.default.func,
  loadingAuthor: _propTypes.default.bool,
  imageSrc: _propTypes.default.string,
  imageDescription: _propTypes.default.string,
  imageBadgeSrc: _propTypes.default.string,
  icon: _propTypes.default.node,
  horizontalSpacing: _propTypes.default.bool,
  formattedTimestamp: _propTypes.default.string.isRequired,
  email: _propTypes.default.node,
  disableTitleTranslation: _propTypes.default.bool,
  children: _propTypes.default.any.isRequired,
  important: stripeColorTypePropType,
  info: stripeColorTypePropType,
  warning: stripeColorTypePropType
});

_defineProperty(MessageItem, "defaultProps", {
  disableTitleTranslation: false,
  email: null,
  horizontalSpacing: false,
  imageBadgeSrc: '',
  imageDescription: '',
  important: false,
  info: false,
  loadingAuthor: false,
  sending: false,
  source: '',
  titleClickDescription: '',
  titleTag: '',
  verticalSpacing: false,
  warning: false
});

var _default = (0, _withStyles.default)((_ref) => {
  let {
    color,
    ui,
    unit,
    pattern
  } = _ref;
  return {
    container: {
      position: 'relative',
      border: '1px solid transparent',
      borderRadius: ui.borderRadius,
      margin: 0,
      padding: 0
    },
    container_horizontalSpacing: {
      paddingLeft: unit * 2,
      paddingRight: unit * 2
    },
    container_verticalSpacing: {
      marginBottom: unit * 2,
      marginTop: unit * 2
    },
    container_withStripe: {
      borderColor: color.accent.border,
      borderWidth: "1px 1px 1px " + unit * 0.5 + "px",
      padding: unit * 2 + "px " + unit * 2 + "px " + unit * 2 + "px " + (unit * 1.5 + 1) + "px"
    },
    container_important: {
      backgroundColor: color.core.danger[0],
      borderLeftColor: color.core.danger[3]
    },
    container_info: {
      backgroundColor: color.accent.bg,
      borderLeftColor: color.core.primary[3]
    },
    container_warning: {
      backgroundColor: color.core.warning[0],
      borderLeftColor: color.core.warning[3]
    },
    table: {
      display: 'table',
      tableLayout: 'fixed',
      width: '100%'
    },
    tableCell: {
      display: 'table-cell',
      verticalAlign: 'top'
    },
    profilePhoto: {
      width: 4 * unit
    },
    profileBadge: {
      position: 'absolute',
      transform: "translate(50%, " + -unit + "px)"
    },
    messageBody: {
      paddingLeft: unit
    },
    messageBodyContent: {
      wordBreak: 'break-word'
    },
    messageTitle: {
      marginRight: unit,
      wordBreak: 'break-word'
    },
    resetButton: _extends({}, pattern.resetButton, {
      textAlign: 'left'
    }),
    sendingOverlay: {
      position: 'absolute',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      pointerEvents: 'all',
      backgroundColor: (0, _toRGBA.default)(color.core.neutral[3], 50),
      zIndex: 1
    },
    tag: {
      border: ui.border,
      borderRadius: unit / 4,
      display: 'inline-block',
      lineHeight: 1,
      marginRight: unit,
      maxWidth: '100%',
      overflow: 'hidden',
      padding: "0 " + unit / 2 + "px",
      textOverflow: 'ellipsis',
      verticalAlign: 'sub',
      whiteSpace: 'nowrap'
    }
  };
})(MessageItem);

exports.default = _default;