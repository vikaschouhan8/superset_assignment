import React from 'react';
import { Emoji } from 'emojibase';
import EmojiDataManager from './EmojiDataManager';
import { CanonicalEmoji, Source } from './types';
export interface WithEmojiDataOptions {
    /** Always render the underlying component, even when the dataset is empty, or a fetch failed. Provided by `withEmojiData`. */
    alwaysRender?: boolean;
    /** Load compact emoji dataset instead of full dataset. Provided by `withEmojiData`. */
    compact?: boolean;
    /** List of emojis to manually use to avoid fetch. Provided by `withEmojiData`. */
    emojis?: Emoji[];
    /** Throw errors that occurred during a fetch. Defaults to `true`. Provided by `withEmojiData`. */
    throwErrors?: boolean;
}
export interface WithEmojiDataWrapperProps {
    /** Locale to load emoji annotations in. Provided by `withEmojiData`. */
    locale?: string;
    /** Emojibase dataset version to load. Provided by `withEmojiData`. */
    version?: string;
}
export interface WithEmojiDataProps {
    /** List of loaded emojis. Provided by `withEmojiData`. */
    emojis: CanonicalEmoji[];
    /** Emoji data manager and loader instance. Provided by `withEmojiData`. */
    emojiData: EmojiDataManager;
    /** Emoji datasource metadata. Provided by `withEmojiData`. */
    emojiSource: Source;
}
export interface WithEmojiDataState {
    emojis: CanonicalEmoji[];
    source: Source;
}
export declare function resetLoaded(): void;
export default function withEmojiData(options?: WithEmojiDataOptions): <Props extends object = {}>(Component: React.ComponentType<Props & WithEmojiDataProps>) => React.ComponentType<Props & WithEmojiDataWrapperProps>;
//# sourceMappingURL=withEmojiData.d.ts.map