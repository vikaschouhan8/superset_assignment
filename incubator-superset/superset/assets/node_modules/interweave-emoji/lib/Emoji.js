"use strict";

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _EmojiDataManager = _interopRequireDefault(require("./EmojiDataManager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Emoji = function (_React$PureComponent) {
  _inheritsLoose(Emoji, _React$PureComponent);

  function Emoji() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Emoji.prototype;

  _proto.render = function render() {
    var data = _EmojiDataManager.default.getInstance(this.props.emojiSource.locale);

    var _ref = this.props,
        emojiLargeSize = _ref.emojiLargeSize,
        emojiPath = _ref.emojiPath,
        emojiSize = _ref.emojiSize,
        emoticon = _ref.emoticon,
        enlargeEmoji = _ref.enlargeEmoji,
        renderUnicode = _ref.renderUnicode,
        shortcode = _ref.shortcode,
        unicode = _ref.unicode;
    var hexcode = this.props.hexcode;

    if ("production" !== process.env.NODE_ENV) {
      if (!emoticon && !shortcode && !unicode && !hexcode) {
        throw new Error('Emoji component requires a `unicode` character, `emoticon`, `hexcode`, or a `shortcode`.');
      }
    }

    if (!hexcode && shortcode) {
      hexcode = data.SHORTCODE_TO_HEXCODE[shortcode];
    }

    if (!hexcode && emoticon) {
      hexcode = data.EMOTICON_TO_HEXCODE[emoticon];
    }

    if (!hexcode && unicode) {
      hexcode = data.UNICODE_TO_HEXCODE[unicode];
    }

    if (!hexcode || !data.EMOJIS[hexcode]) {
      return _react.default.createElement("span", null, unicode || emoticon || shortcode || hexcode);
    }

    var emoji = data.EMOJIS[hexcode];

    if (renderUnicode) {
      return _react.default.createElement("span", null, emoji.unicode);
    }

    var styles = {
      display: 'inline-block',
      verticalAlign: 'middle'
    };

    if (enlargeEmoji && emojiLargeSize) {
      styles.width = emojiLargeSize;
      styles.height = emojiLargeSize;
    } else if (emojiSize) {
      styles.width = emojiSize;
      styles.height = emojiSize;
    }

    var path = emojiPath || '{{hexcode}}';

    if (typeof path === 'function') {
      path = path(emoji.hexcode, enlargeEmoji, emojiSize, emojiLargeSize);
    } else {
      path = path.replace('{{hexcode}}', emoji.hexcode);
    }

    return _react.default.createElement("img", {
      src: path,
      alt: emoji.unicode,
      title: emoji.annotation,
      style: styles,
      "aria-label": emoji.annotation,
      "data-emoticon": emoji.emoticon,
      "data-unicode": emoji.unicode,
      "data-hexcode": emoji.hexcode,
      "data-shortcodes": emoji.canonical_shortcodes.join(', ')
    });
  };

  return Emoji;
}(_react.default.PureComponent);

exports.default = Emoji;

_defineProperty(Emoji, "propTypes", {
  emojiLargeSize: _propTypes.default.any,
  emojiPath: _propTypes.default.any,
  emojiSize: _propTypes.default.any,
  emojiSource: _propTypes.default.any.isRequired,
  emoticon: _propTypes.default.any,
  enlargeEmoji: _propTypes.default.bool,
  hexcode: _propTypes.default.any,
  renderUnicode: _propTypes.default.bool,
  shortcode: _propTypes.default.any,
  unicode: _propTypes.default.any
});

_defineProperty(Emoji, "defaultProps", {
  emojiLargeSize: '3em',
  emojiPath: '{{hexcode}}',
  emojiSize: '1em',
  emoticon: '',
  enlargeEmoji: false,
  hexcode: '',
  renderUnicode: false,
  shortcode: '',
  unicode: ''
});