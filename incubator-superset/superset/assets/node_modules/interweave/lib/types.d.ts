import React from 'react';
export declare type Node = null | string | React.ReactElement<any>;
export interface NodeConfig {
    children: string[];
    content: number;
    invalid: string[];
    parent: string[];
    self: boolean;
    tagName: string;
    type: number;
    void: boolean;
}
export interface Attributes {
    [attr: string]: string | number | boolean | object;
}
export declare type AfterParseCallback<T> = (content: Node[], props: T) => Node[];
export declare type BeforeParseCallback<T> = (content: string, props: T) => string;
export declare type TransformCallback = (node: HTMLElement, children: Node[], config: NodeConfig) => React.ReactNode;
export declare type MatchCallback = (matches: string[]) => object;
export interface MatchResponse {
    match: string;
    [key: string]: string;
}
export interface ConfigMap {
    [key: string]: Partial<NodeConfig>;
}
export interface FilterMap {
    [key: string]: number;
}
//# sourceMappingURL=types.d.ts.map