"use strict";

exports.__esModule = true;
exports.default = useStylesFactory;

var _react = _interopRequireWildcard(require("react"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _DirectionContext = _interopRequireDefault(require("./DirectionContext"));

var _ThemeContext = _interopRequireDefault(require("./ThemeContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function useStylesFactory(aesthetic) {
  return function useStyles(styleSheet, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        customName = _options.styleName;
    var ref = (0, _react.useRef)();
    var dir = (0, _react.useContext)(_DirectionContext.default);
    var themeName = (0, _react.useContext)(_ThemeContext.default);
    var styleName = '';

    if (ref.current) {
      styleName = ref.current;
    } else {
      styleName = customName || (0, _v.default)();
      ref.current = styleName;
      aesthetic.registerStyleSheet(styleName, styleSheet);
    }

    var params = {
      dir: dir,
      name: styleName,
      theme: themeName
    };
    var sheet = aesthetic.createStyleSheet(styleName, params);
    (0, _react.useLayoutEffect)(function () {
      aesthetic.flushStyles(styleName);
    }, [dir, styleName, themeName]);

    var cx = function cx() {
      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
        styles[_key] = arguments[_key];
      }

      return aesthetic.transformStyles(styles, params);
    };

    return [sheet, cx, styleName];
  };
}