/*
 * Generated by dtrace(1M).
 */

#ifndef	_NODE_PROVIDER_H
#define	_NODE_PROVIDER_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define NODE_STABILITY "___dtrace_stability$node$v1$5_5_4_1_1_0_1_1_0_1_1_4_5_5_4"

#define NODE_TYPEDEFS "___dtrace_typedefs$node$v2$6e6f64655f6474726163655f687474705f7365727665725f726571756573745f74$6e6f64655f6474726163655f636f6e6e656374696f6e5f74$6e6f64655f6474726163655f687474705f636c69656e745f726571756573745f74"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	NODE_GC_DONE(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$gc__done$v1$696e74$696e74$766f6964202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_GC_DONE_ENABLED() \
	({ int _r = __dtrace_isenabled$node$gc__done$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_GC_START(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$gc__start$v1$696e74$696e74$766f6964202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_GC_START_ENABLED() \
	({ int _r = __dtrace_isenabled$node$gc__start$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_HTTP_CLIENT_REQUEST(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$http__client__request$v1$6e6f64655f6474726163655f687474705f636c69656e745f726571756573745f74202a$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$63686172202a$63686172202a$696e74(arg0, arg1, arg2, arg3, arg4, arg5, arg6); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_HTTP_CLIENT_REQUEST_ENABLED() \
	({ int _r = __dtrace_isenabled$node$http__client__request$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_HTTP_CLIENT_RESPONSE(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$http__client__response$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_HTTP_CLIENT_RESPONSE_ENABLED() \
	({ int _r = __dtrace_isenabled$node$http__client__response$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_HTTP_SERVER_REQUEST(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$http__server__request$v1$6e6f64655f6474726163655f687474705f7365727665725f726571756573745f74202a$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$63686172202a$63686172202a$696e74(arg0, arg1, arg2, arg3, arg4, arg5, arg6); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_HTTP_SERVER_REQUEST_ENABLED() \
	({ int _r = __dtrace_isenabled$node$http__server__request$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_HTTP_SERVER_RESPONSE(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$http__server__response$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_HTTP_SERVER_RESPONSE_ENABLED() \
	({ int _r = __dtrace_isenabled$node$http__server__response$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_NET_SERVER_CONNECTION(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$net__server__connection$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_NET_SERVER_CONNECTION_ENABLED() \
	({ int _r = __dtrace_isenabled$node$net__server__connection$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	NODE_NET_STREAM_END(arg0, arg1, arg2, arg3) \
do { \
	__asm__ volatile(".reference " NODE_TYPEDEFS); \
	__dtrace_probe$node$net__stream__end$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(arg0, arg1, arg2, arg3); \
	__asm__ volatile(".reference " NODE_STABILITY); \
} while (0)
#define	NODE_NET_STREAM_END_ENABLED() \
	({ int _r = __dtrace_isenabled$node$net__stream__end$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$node$gc__done$v1$696e74$696e74$766f6964202a(int, int, const void *);
extern int __dtrace_isenabled$node$gc__done$v1(void);
extern void __dtrace_probe$node$gc__start$v1$696e74$696e74$766f6964202a(int, int, const void *);
extern int __dtrace_isenabled$node$gc__start$v1(void);
extern void __dtrace_probe$node$http__client__request$v1$6e6f64655f6474726163655f687474705f636c69656e745f726571756573745f74202a$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$63686172202a$63686172202a$696e74(const node_dtrace_http_client_request_t *, const node_dtrace_connection_t *, const char *, int, const char *, const char *, int);
extern int __dtrace_isenabled$node$http__client__request$v1(void);
extern void __dtrace_probe$node$http__client__response$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(const node_dtrace_connection_t *, const char *, int, int);
extern int __dtrace_isenabled$node$http__client__response$v1(void);
extern void __dtrace_probe$node$http__server__request$v1$6e6f64655f6474726163655f687474705f7365727665725f726571756573745f74202a$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$63686172202a$63686172202a$696e74(const node_dtrace_http_server_request_t *, const node_dtrace_connection_t *, const char *, int, const char *, const char *, int);
extern int __dtrace_isenabled$node$http__server__request$v1(void);
extern void __dtrace_probe$node$http__server__response$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(const node_dtrace_connection_t *, const char *, int, int);
extern int __dtrace_isenabled$node$http__server__response$v1(void);
extern void __dtrace_probe$node$net__server__connection$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(const node_dtrace_connection_t *, const char *, int, int);
extern int __dtrace_isenabled$node$net__server__connection$v1(void);
extern void __dtrace_probe$node$net__stream__end$v1$6e6f64655f6474726163655f636f6e6e656374696f6e5f74202a$63686172202a$696e74$696e74(const node_dtrace_connection_t *, const char *, int, int);
extern int __dtrace_isenabled$node$net__stream__end$v1(void);

#else

#define	NODE_GC_DONE(arg0, arg1, arg2) \
do { \
	} while (0)
#define	NODE_GC_DONE_ENABLED() (0)
#define	NODE_GC_START(arg0, arg1, arg2) \
do { \
	} while (0)
#define	NODE_GC_START_ENABLED() (0)
#define	NODE_HTTP_CLIENT_REQUEST(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
do { \
	} while (0)
#define	NODE_HTTP_CLIENT_REQUEST_ENABLED() (0)
#define	NODE_HTTP_CLIENT_RESPONSE(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	NODE_HTTP_CLIENT_RESPONSE_ENABLED() (0)
#define	NODE_HTTP_SERVER_REQUEST(arg0, arg1, arg2, arg3, arg4, arg5, arg6) \
do { \
	} while (0)
#define	NODE_HTTP_SERVER_REQUEST_ENABLED() (0)
#define	NODE_HTTP_SERVER_RESPONSE(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	NODE_HTTP_SERVER_RESPONSE_ENABLED() (0)
#define	NODE_NET_SERVER_CONNECTION(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	NODE_NET_SERVER_CONNECTION_ENABLED() (0)
#define	NODE_NET_STREAM_END(arg0, arg1, arg2, arg3) \
do { \
	} while (0)
#define	NODE_NET_STREAM_END_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _NODE_PROVIDER_H */
